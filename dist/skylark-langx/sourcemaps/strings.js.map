{"version":3,"sources":["strings.js"],"names":["define","escapeCharMap","Object","freeze","&","<",">","\"","'","`","=","replaceChar","c","escapeChars","idCounter","template","id","data","name","string","line","body","func","map","escapeHTML","me","arguments","callee","cache","test","get","variable","replace","Function","_","stash","call","context","ret","document","getElementById","innerHTML","camelCase","str","a","toUpperCase","dasherize","toLowerCase","deserializeValue","value","JSON","parse","e","toString","String","generateUUID","r","Math","random","lowerFirst","charAt","slice","rtrim","serializeValue","stringify","substitute","transform","thisObject","getObject","key","match","retVal","getValue","keys","obj","_k","pop","split","reverse","window","proxy","v","format","slugify","from","i","l","length","RegExp","trim","prototype","uniqueId","prefix","upperFirst"],"mappings":"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","file":"../strings.js","sourcesContent":["define([\r\n],function(){\r\n    // add default escape function for escaping HTML entities\r\n    var escapeCharMap = Object.freeze({\r\n        '&': '&amp;',\r\n        '<': '&lt;',\r\n        '>': '&gt;',\r\n        '\"': '&quot;',\r\n        \"'\": '&#x27;',\r\n        '`': '&#x60;',\r\n        '=': '&#x3D;',\r\n    });\r\n    function replaceChar(c) {\r\n        return escapeCharMap[c];\r\n    }\r\n    var escapeChars = /[&<>\"'`=]/g;\r\n\r\n\r\n     /*\r\n     * Converts camel case into dashes.\r\n     * @param {String} str\r\n     * @return {String}\r\n     * @exapmle marginTop -> margin-top\r\n     */\r\n    function dasherize(str) {\r\n        return str.replace(/::/g, '/')\r\n            .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n            .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n            .replace(/_/g, '-')\r\n            .toLowerCase();\r\n    }\r\n\r\n    function deserializeValue(value) {\r\n        try {\r\n            return value ?\r\n                value == \"true\" ||\r\n                (value == \"false\" ? false :\r\n                    value == \"null\" ? null :\r\n                    +value + \"\" == value ? +value :\r\n                    /^[\\[\\{]/.test(value) ? JSON.parse(value) :\r\n                    value) : value;\r\n        } catch (e) {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    function escapeHTML(str) {\r\n        if (str == null) {\r\n            return '';\r\n        }\r\n        if (!str) {\r\n            return String(str);\r\n        }\r\n\r\n        return str.toString().replace(escapeChars, replaceChar);\r\n    }\r\n\r\n    function generateUUID() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0;\r\n            var v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    function trim(str) {\r\n        return str == null ? \"\" : String.prototype.trim.call(str);\r\n    }\r\n\r\n    function substitute( /*String*/ template,\r\n        /*Object|Array*/\r\n        map,\r\n        /*Function?*/\r\n        transform,\r\n        /*Object?*/\r\n        thisObject) {\r\n        // summary:\r\n        //    Performs parameterized substitutions on a string. Throws an\r\n        //    exception if any parameter is unmatched.\r\n        // template:\r\n        //    a string with expressions in the form `${key}` to be replaced or\r\n        //    `${key:format}` which specifies a format function. keys are case-sensitive.\r\n        // map:\r\n        //    hash to search for substitutions\r\n        // transform:\r\n        //    a function to process all parameters before substitution takes\r\n\r\n\r\n        thisObject = thisObject || window;\r\n        transform = transform ?\r\n            proxy(thisObject, transform) : function(v) {\r\n                return v;\r\n            };\r\n\r\n        function getObject(key, map) {\r\n            if (key.match(/\\./)) {\r\n                var retVal,\r\n                    getValue = function(keys, obj) {\r\n                        var _k = keys.pop();\r\n                        if (_k) {\r\n                            if (!obj[_k]) return null;\r\n                            return getValue(keys, retVal = obj[_k]);\r\n                        } else {\r\n                            return retVal;\r\n                        }\r\n                    };\r\n                return getValue(key.split(\".\").reverse(), map);\r\n            } else {\r\n                return map[key];\r\n            }\r\n        }\r\n\r\n        return template.replace(/\\$\\{([^\\s\\:\\}]+)(?:\\:([^\\s\\:\\}]+))?\\}/g,\r\n            function(match, key, format) {\r\n                var value = getObject(key, map);\r\n                if (format) {\r\n                    value = getObject(format, thisObject).call(thisObject, value, key);\r\n                }\r\n                return transform(value, key).toString();\r\n            }); // String\r\n    }\r\n\r\n    var idCounter = 0;\r\n    function uniqueId (prefix) {\r\n        var id = ++idCounter + '';\r\n        return prefix ? prefix + id : id;\r\n    }\r\n\r\n\r\n    /**\r\n     * https://github.com/cho45/micro-template.js\r\n     * (c) cho45 http://cho45.github.com/mit-license\r\n     */\r\n    function template (id, data) {\r\n\r\n        function include(name, args) {\r\n            var stash = {};\r\n            for (var key in template.context.stash) if (template.context.stash.hasOwnProperty(key)) {\r\n                stash[key] = template.context.stash[key];\r\n            }\r\n            if (args) for (var key in args) if (args.hasOwnProperty(key)) {\r\n                stash[key] = args[key];\r\n            }\r\n            var context = template.context;\r\n            context.ret += template(name, stash);\r\n            template.context = context;\r\n        }\r\n\r\n        function wrapper(name, fun) {\r\n            var current = template.context.ret;\r\n            template.context.ret = '';\r\n            fun.apply(template.context);\r\n            var content = template.context.ret;\r\n            var orig_content = template.context.stash.content;\r\n            template.context.stash.content = content;\r\n            template.context.ret = current + template(name, template.context.stash);\r\n            template.context.stash.content = orig_content;\r\n        }\r\n\r\n        var me = arguments.callee;\r\n        if (!me.cache[id]) me.cache[id] = (function () {\r\n            var name = id, string = /^[\\w\\-]+$/.test(id) ? me.get(id): (name = 'template(string)', id); // no warnings\r\n            var line = 1, body = (\r\n                \"try { \" +\r\n                    (me.variable ?  \"var \" + me.variable + \" = this.stash;\" : \"with (this.stash) { \") +\r\n                        \"this.ret += '\"  +\r\n                        string.\r\n                            replace(/<%/g, '\\x11').replace(/%>/g, '\\x13'). // if you want other tag, just edit this line\r\n                            replace(/'(?![^\\x11\\x13]+?\\x13)/g, '\\\\x27').\r\n                            replace(/^\\s*|\\s*$/g, '').\r\n                            replace(/\\n|\\r\\n/g, function () { return \"';\\nthis.line = \" + (++line) + \"; this.ret += '\\\\n\" }).\r\n                            replace(/\\x11=raw(.+?)\\x13/g, \"' + ($1) + '\").\r\n                            replace(/\\x11=(.+?)\\x13/g, \"' + this.escapeHTML($1) + '\").\r\n                            replace(/\\x11(.+?)\\x13/g, \"'; $1; this.ret += '\") +\r\n                    \"'; \" + (me.variable ? \"\" : \"}\") + \"return this.ret;\" +\r\n                \"} catch (e) { throw 'TemplateError: ' + e + ' (on \" + name + \"' + ' line ' + this.line + ')'; } \" +\r\n                \"//@ sourceURL=\" + name + \"\\n\" // source map\r\n            ).replace(/this\\.ret \\+= '';/g, '');\r\n            var func = new Function(body);\r\n            var map  = { '&' : '&amp;', '<' : '&lt;', '>' : '&gt;', '\\x22' : '&#x22;', '\\x27' : '&#x27;' };\r\n            var escapeHTML = function (string) { return (''+string).replace(/[&<>\\'\\\"]/g, function (_) { return map[_] }) };\r\n            return function (stash) { return func.call(me.context = { escapeHTML: escapeHTML, line: 1, ret : '', stash: stash }) };\r\n        })();\r\n        return data ? me.cache[id](data) : me.cache[id];\r\n    }\r\n\r\n    template.cache = {};\r\n    \r\n\r\n    template.get = function (id) {\r\n        return document.getElementById(id).innerHTML;\r\n    };\r\n\r\n    function rtrim(str) {\r\n        return str.replace(/\\s+$/g, '');\r\n    }\r\n\r\n    // Slugify a string\r\n    function slugify(str) {\r\n        str = str.replace(/^\\s+|\\s+$/g, '');\r\n\r\n        // Make the string lowercase\r\n        str = str.toLowerCase();\r\n\r\n        // Remove accents, swap ñ for n, etc\r\n        var from = \"ÁÄÂÀÃÅČÇĆĎÉĚËÈÊẼĔȆÍÌÎÏŇÑÓÖÒÔÕØŘŔŠŤÚŮÜÙÛÝŸŽáäâàãåčçćďéěëèêẽĕȇíìîïňñóöòôõøðřŕšťúůüùûýÿžþÞĐđßÆa·/_,:;\";\r\n        var to   = \"AAAAAACCCDEEEEEEEEIIIINNOOOOOORRSTUUUUUYYZaaaaaacccdeeeeeeeeiiiinnooooooorrstuuuuuyyzbBDdBAa------\";\r\n        for (var i=0, l=from.length ; i<l ; i++) {\r\n            str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\r\n        }\r\n\r\n        // Remove invalid chars\r\n        str = str.replace(/[^a-z0-9 -]/g, '') \r\n        // Collapse whitespace and replace by -\r\n        .replace(/\\s+/g, '-') \r\n        // Collapse dashes\r\n        .replace(/-+/g, '-'); \r\n\r\n        return str;\r\n    }    \r\n\r\n    // return boolean if string 'true' or string 'false', or if a parsable string which is a number\r\n    // also supports JSON object and/or arrays parsing\r\n    function toType(str) {\r\n        var type = typeof str;\r\n        if (type !== 'string') {\r\n            return str;\r\n        }\r\n        var nb = parseFloat(str);\r\n        if (!isNaN(nb) && isFinite(str)) {\r\n            return nb;\r\n        }\r\n        if (str === 'false') {\r\n            return false;\r\n        }\r\n        if (str === 'true') {\r\n            return true;\r\n        }\r\n\r\n        try {\r\n            str = JSON.parse(str);\r\n        } catch (e) {}\r\n\r\n        return str;\r\n    }\r\n\r\n\treturn {\r\n        camelCase: function(str) {\r\n            return str.replace(/-([\\da-z])/g, function(a) {\r\n                return a.toUpperCase().replace('-', '');\r\n            });\r\n        },\r\n\r\n        dasherize: dasherize,\r\n\r\n        deserializeValue: deserializeValue,\r\n\r\n        escapeHTML : escapeHTML,\r\n\r\n        generateUUID : generateUUID,\r\n\r\n        lowerFirst: function(str) {\r\n            return str.charAt(0).toLowerCase() + str.slice(1);\r\n        },\r\n\r\n        rtrim : rtrim,\r\n\r\n        serializeValue: function(value) {\r\n            return JSON.stringify(value)\r\n        },\r\n\r\n\r\n        substitute: substitute,\r\n\r\n        slugify : slugify,\r\n\r\n        template : template,\r\n\r\n        trim: trim,\r\n\r\n        uniqueId: uniqueId,\r\n\r\n        upperFirst: function(str) {\r\n            return str.charAt(0).toUpperCase() + str.slice(1);\r\n        }\r\n\t} ; \r\n\r\n});"]}