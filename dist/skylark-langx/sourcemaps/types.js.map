{"version":3,"sources":["types.js"],"names":["define","class2type","type","split","forEach","name","toLowerCase","obj","String","toString","call","isFunction","value","isHtmlNode","Node","isObject","isString","isWindow","window","isArray","object","constructor","Array","isArrayLike","length","isBoolean","isDefined","isDocument","nodeType","DOCUMENT_NODE","isEmptyObject","isNumber","isPlainObject","Object","getPrototypeOf","prototype","isSameOrigin","href","origin","location","protocol","hostname","port","startsWith"],"mappings":";;;;;;;AAAAA,UACE,WACE,IACQC,EADJC,GACID,KAGJ,gEAAgEE,MAAM,KAAKC,QAAQ,SAASC,GACxFJ,EAAW,WAAaI,EAAO,KAAOA,EAAKC,gBAGxC,SAAcC,GACjB,OAAc,MAAPA,EAAcC,OAAOD,GACxBN,EAAWQ,SAASC,KAAKH,KAAS,WAkC9C,SAASI,EAAWC,GAChB,MAAsB,YAAfV,EAAKU,GAGhB,SAASC,EAAWN,GAChB,OAAOA,GAAQA,aAAeO,KA0BlC,SAASC,EAASR,GACd,MAAoB,UAAbL,EAAKK,GAOhB,SAASS,EAAST,GACd,MAAsB,iBAARA,EAGlB,SAASU,EAASV,GACd,OAAOA,GAAOA,GAAOA,EAAIW,OAa7B,OAEIC,QAzFJ,SAAiBC,GACb,OAAOA,GAAUA,EAAOC,cAAgBC,OA0FxCC,YAvFJ,SAAqBhB,GACjB,OAAQS,EAAST,KAASM,EAAWN,IAA6B,iBAAdA,EAAIiB,SAAuBb,EAAWJ,IAwF1FkB,UArFJ,SAAmBlB,GACf,MAAuB,kBAAV,GAsFbmB,UAnFJ,SAAmBnB,GACf,YAAsB,IAARA,GAoFdoB,WAjFJ,SAAoBpB,GAChB,OAAc,MAAPA,GAAeA,EAAIqB,UAAYrB,EAAIsB,eAkF1CC,cA/EJ,SAAuBvB,GACnB,IAAIF,EACJ,IAAKA,KAAQE,EACT,GAAkB,OAAdA,EAAIF,GACJ,OAAO,EAGf,OAAO,GA0EPM,WAAYA,EAEZE,WAAYA,EAEZkB,SAhDJ,SAAkBxB,GACd,MAAqB,iBAAPA,GAiDdQ,SAAUA,EAEViB,cA5CJ,SAAuBzB,GACnB,OAAOQ,EAASR,KAASU,EAASV,IAAQ0B,OAAOC,eAAe3B,IAAQ0B,OAAOE,WA6C/EnB,SAAUA,EAEVoB,aApCJ,SAAsBC,GAClB,GAAIA,EAAM,CACN,IAAIC,EAASC,SAASC,SAAW,KAAOD,SAASE,SAIjD,OAHIF,SAASG,OACTJ,GAAU,IAAMC,SAASG,MAEtBL,EAAKM,WAAWL,KAgC3BrB,SAAUA,EAEVf,KAAMA","file":"../types.js","sourcesContent":["define([\r\n],function(){\r\n    var type = (function() {\r\n        var class2type = {};\r\n\r\n        // Populate the class2type map\r\n        \"Boolean Number String Function Array Date RegExp Object Error\".split(\" \").forEach(function(name) {\r\n            class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n        });\r\n\r\n        return function type(obj) {\r\n            return obj == null ? String(obj) :\r\n                class2type[toString.call(obj)] || \"object\";\r\n        };\r\n    })();\r\n\r\n    function isArray(object) {\r\n        return object && object.constructor === Array;\r\n    }\r\n\r\n    function isArrayLike(obj) {\r\n        return !isString(obj) && !isHtmlNode(obj) && typeof obj.length == 'number' && !isFunction(obj);\r\n    }\r\n\r\n    function isBoolean(obj) {\r\n        return typeof(obj) === \"boolean\";\r\n    }\r\n\r\n    function isDefined(obj) {\r\n        return typeof obj !== 'undefined';\r\n    }\r\n\r\n    function isDocument(obj) {\r\n        return obj != null && obj.nodeType == obj.DOCUMENT_NODE;\r\n    }\r\n\r\n    function isEmptyObject(obj) {\r\n        var name;\r\n        for (name in obj) {\r\n            if (obj[name] !== null) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    function isFunction(value) {\r\n        return type(value) == \"function\";\r\n    }\r\n\r\n    function isHtmlNode(obj) {\r\n        return obj && (obj instanceof Node);\r\n    }\r\n\r\n    function isInstanceOf( /*Object*/ value, /*Type*/ type) {\r\n        //Tests whether the value is an instance of a type.\r\n        if (value === undefined) {\r\n            return false;\r\n        } else if (value === null || type == Object) {\r\n            return true;\r\n        } else if (typeof value === \"number\") {\r\n            return type === Number;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else if (typeof value === \"boolean\") {\r\n            return type === Boolean;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else {\r\n            return (value instanceof type) || (value && value.isInstanceOf ? value.isInstanceOf(type) : false);\r\n        }\r\n    }\r\n\r\n    function isNumber(obj) {\r\n        return typeof obj == 'number';\r\n    }\r\n\r\n    function isObject(obj) {\r\n        return type(obj) == \"object\";\r\n    }\r\n\r\n    function isPlainObject(obj) {\r\n        return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;\r\n    }\r\n\r\n    function isString(obj) {\r\n        return typeof obj === 'string';\r\n    }\r\n\r\n    function isWindow(obj) {\r\n        return obj && obj == obj.window;\r\n    }\r\n\r\n    function isSameOrigin(href) {\r\n        if (href) {\r\n            var origin = location.protocol + '//' + location.hostname;\r\n            if (location.port) {\r\n                origin += ':' + location.port;\r\n            }\r\n            return href.startsWith(origin);\r\n        }\r\n    }\r\n\r\n    return {\r\n\r\n        isArray: isArray,\r\n\r\n        isArrayLike: isArrayLike,\r\n\r\n        isBoolean: isBoolean,\r\n\r\n        isDefined: isDefined,\r\n\r\n        isDocument: isDocument,\r\n\r\n        isEmptyObject: isEmptyObject,\r\n\r\n        isFunction: isFunction,\r\n\r\n        isHtmlNode: isHtmlNode,\r\n\r\n        isNumber: isNumber,\r\n\r\n        isObject: isObject,\r\n\r\n        isPlainObject: isPlainObject,\r\n\r\n        isString: isString,\r\n\r\n        isSameOrigin: isSameOrigin,\r\n\r\n        isWindow: isWindow,\r\n\r\n        type: type\r\n    };\r\n\r\n});"]}