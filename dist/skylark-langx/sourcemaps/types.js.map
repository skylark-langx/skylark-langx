{"version":3,"sources":["types.js"],"names":["define","class2type","toString","type","split","forEach","name","toLowerCase","obj","String","call","isEmptyObject","isFunction","value","isHtmlNode","Node","isObject","isString","isWindow","window","isArray","object","constructor","Array","isArrayLike","length","isBoolean","isDefined","isDocument","nodeType","DOCUMENT_NODE","isEmpty","isNull","isNumber","isPlainObject","Object","getPrototypeOf","prototype","isSameOrigin","href","origin","location","protocol","hostname","port","startsWith","isSymbol","isObjectLike","objectToString","symbolTag","isUndefined","undefined"],"mappings":";;;;;;;AAAAA,UACE,WACE,IAGQC,EAHJC,KAAcA,SAEdC,GACIF,KAGJ,uEAAuEG,MAAM,KAAKC,QAAQ,SAASC,GAC/FL,EAAW,WAAaK,EAAO,KAAOA,EAAKC,gBAGxC,SAAcC,GACjB,OAAc,MAAPA,EAAcC,OAAOD,GACxBP,EAAWC,EAASQ,KAAKF,KAAS,WA4D9C,SAASG,EAAcH,GACnB,IAAIF,EACJ,IAAKA,KAAQE,EACT,GAAkB,OAAdA,EAAIF,GACJ,OAAO,EAGf,OAAO,EAiBX,SAASM,EAAWC,GAChB,MAAsB,YAAfV,EAAKU,GAGhB,SAASC,EAAWN,GAChB,OAAOA,GAAQA,aAAeO,KA8BlC,SAASC,EAASR,GACd,MAAoB,UAAbL,EAAKK,GAOhB,SAASS,EAAST,GACd,MAAsB,iBAARA,EAGlB,SAASU,EAASV,GACd,OAAOA,GAAOA,GAAOA,EAAIW,OAmC7B,OAEIC,QArKJ,SAAiBC,GACb,OAAOA,GAAUA,EAAOC,cAAgBC,OAsKxCC,YA5IJ,SAAqBhB,GACjB,OAAQS,EAAST,KAASM,EAAWN,IAA6B,iBAAdA,EAAIiB,SAAuBb,EAAWJ,IA6I1FkB,UA7HJ,SAAmBlB,GACf,MAAuB,kBAAV,GA8HbmB,UA3HJ,SAAmBnB,GACf,YAAsB,IAARA,GA4HdoB,WAzHJ,SAAoBpB,GAChB,OAAc,MAAPA,GAAeA,EAAIqB,UAAYrB,EAAIsB,eA0H1CC,QAAUpB,EAEVA,cAAeA,EAEfC,WAAYA,EAEZE,WAAYA,EAEZkB,OA5EJ,SAAgBnB,GACd,MAAuB,SAAhBV,EAAKU,IA6EVoB,SA1EJ,SAAkBzB,GACd,MAAqB,iBAAPA,GA2EdQ,SAAUA,EAEVkB,cAtEJ,SAAuB1B,GACnB,OAAOQ,EAASR,KAASU,EAASV,IAAQ2B,OAAOC,eAAe5B,IAAQ2B,OAAOE,WAuE/EpB,SAAUA,EAEVqB,aA9DJ,SAAsBC,GAClB,GAAIA,EAAM,CACN,IAAIC,EAASC,SAASC,SAAW,KAAOD,SAASE,SAIjD,OAHIF,SAASG,OACTJ,GAAU,IAAMC,SAASG,MAEtBL,EAAKM,WAAWL,KA0D3BM,SAzCJ,SAAkBjC,GAChB,MAAuB,iBAATA,GACXkC,aAAalC,IAAUmC,eAAetC,KAAKG,IAAUoC,WAyCtDC,YAtCJ,SAAqBrC,GACnB,YAAiBsC,IAAVtC,GAuCLK,SAAUA,EAEVf,KAAMA","file":"../types.js","sourcesContent":["define([\r\n],function(){\r\n    var toString = {}.toString;\r\n    \r\n    var type = (function() {\r\n        var class2type = {};\r\n\r\n        // Populate the class2type map\r\n        \"Boolean Number String Function Array Date RegExp Object Error Symbol\".split(\" \").forEach(function(name) {\r\n            class2type[\"[object \" + name + \"]\"] = name.toLowerCase();\r\n        });\r\n\r\n        return function type(obj) {\r\n            return obj == null ? String(obj) :\r\n                class2type[toString.call(obj)] || \"object\";\r\n        };\r\n    })();\r\n\r\n    function isArray(object) {\r\n        return object && object.constructor === Array;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if `value` is array-like. A value is considered array-like if it's\r\n     * not a function/string/element and has a `value.length` that's an integer greater than or\r\n     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\r\n     *\r\n     * @category Lang\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\r\n     * @example\r\n     *\r\n     * isArrayLike([1, 2, 3])\r\n     * // => true\r\n     *\r\n     * isArrayLike(document.body.children)\r\n     * // => false\r\n     *\r\n     * isArrayLike('abc')\r\n     * // => true\r\n     *\r\n     * isArrayLike(Function)\r\n     * // => false\r\n     */    \r\n    function isArrayLike(obj) {\r\n        return !isString(obj) && !isHtmlNode(obj) && typeof obj.length == 'number' && !isFunction(obj);\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a boolean primitive or object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.\r\n     * @example\r\n     *\r\n     * isBoolean(false)\r\n     * // => true\r\n     *\r\n     * isBoolean(null)\r\n     * // => false\r\n     */\r\n    function isBoolean(obj) {\r\n        return typeof(obj) === \"boolean\";\r\n    }\r\n\r\n    function isDefined(obj) {\r\n        return typeof obj !== 'undefined';\r\n    }\r\n\r\n    function isDocument(obj) {\r\n        return obj != null && obj.nodeType == obj.DOCUMENT_NODE;\r\n    }\r\n\r\n    function isEmptyObject(obj) {\r\n        var name;\r\n        for (name in obj) {\r\n            if (obj[name] !== null) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Function` object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a function, else `false`.\r\n     * @example\r\n     *\r\n     * isFunction(parseInt)\r\n     * // => true\r\n     *\r\n     * isFunction(/abc/)\r\n     * // => false\r\n     */\r\n    function isFunction(value) {\r\n        return type(value) == \"function\";\r\n    }\r\n\r\n    function isHtmlNode(obj) {\r\n        return obj && (obj instanceof Node);\r\n    }\r\n\r\n    function isInstanceOf( /*Object*/ value, /*Type*/ type) {\r\n        //Tests whether the value is an instance of a type.\r\n        if (value === undefined) {\r\n            return false;\r\n        } else if (value === null || type == Object) {\r\n            return true;\r\n        } else if (typeof value === \"number\") {\r\n            return type === Number;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else if (typeof value === \"boolean\") {\r\n            return type === Boolean;\r\n        } else if (typeof value === \"string\") {\r\n            return type === String;\r\n        } else {\r\n            return (value instanceof type) || (value && value.isInstanceOf ? value.isInstanceOf(type) : false);\r\n        }\r\n    }\r\n\r\n    function isNull(value) {\r\n      return type(value) === \"null\";\r\n    }\r\n\r\n    function isNumber(obj) {\r\n        return typeof obj == 'number';\r\n    }\r\n\r\n    function isObject(obj) {\r\n        return type(obj) == \"object\";\r\n    }\r\n\r\n    function isPlainObject(obj) {\r\n        return isObject(obj) && !isWindow(obj) && Object.getPrototypeOf(obj) == Object.prototype;\r\n    }\r\n\r\n    function isString(obj) {\r\n        return typeof obj === 'string';\r\n    }\r\n\r\n    function isWindow(obj) {\r\n        return obj && obj == obj.window;\r\n    }\r\n\r\n    function isSameOrigin(href) {\r\n        if (href) {\r\n            var origin = location.protocol + '//' + location.hostname;\r\n            if (location.port) {\r\n                origin += ':' + location.port;\r\n            }\r\n            return href.startsWith(origin);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if `value` is classified as a `Symbol` primitive or object.\r\n     *\r\n     * @param {*} value The value to check.\r\n     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\r\n     * @example\r\n     *\r\n     * _.isSymbol(Symbol.iterator);\r\n     * // => true\r\n     *\r\n     * _.isSymbol('abc');\r\n     * // => false\r\n     */\r\n    function isSymbol(value) {\r\n      return typeof value == 'symbol' ||\r\n        (isObjectLike(value) && objectToString.call(value) == symbolTag);\r\n    }\r\n\r\n    function isUndefined(value) {\r\n      return value === undefined\r\n    }\r\n\r\n    return {\r\n\r\n        isArray: isArray,\r\n\r\n        isArrayLike: isArrayLike,\r\n\r\n        isBoolean: isBoolean,\r\n\r\n        isDefined: isDefined,\r\n\r\n        isDocument: isDocument,\r\n\r\n        isEmpty : isEmptyObject,\r\n\r\n        isEmptyObject: isEmptyObject,\r\n\r\n        isFunction: isFunction,\r\n\r\n        isHtmlNode: isHtmlNode,\r\n\r\n        isNull: isNull,\r\n\r\n        isNumber: isNumber,\r\n\r\n        isObject: isObject,\r\n\r\n        isPlainObject: isPlainObject,\r\n\r\n        isString: isString,\r\n\r\n        isSameOrigin: isSameOrigin,\r\n\r\n        isSymbol : isSymbol,\r\n\r\n        isUndefined: isUndefined,\r\n\r\n        isWindow: isWindow,\r\n\r\n        type: type\r\n    };\r\n\r\n});"]}