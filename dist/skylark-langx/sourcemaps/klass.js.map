{"version":3,"sources":["klass.js"],"names":["define","arrays","objects","types","uniq","has","mixin","isArray","isDefined","_constructor","this","_construct","apply","arguments","init","createClass","props","parent","mixins","options","Object","innerParent","ctor","result","forEach","Error","clss","unshift","superclass","concat","filter","cls","clsMixines","i","length","serialMixins","newCtor","xtor","Function","prototype","create","__proto__","__mixin__","mergeMixins","klassName","constructor","__mixins__","partial","proto","_super","noOverrided","name","overrides","prop","fn","superFn","tmp","overrided","ret","isPlainObject","defineProperty","extendClass","inherit","f1"],"mappings":";;;;;;;AAAAA,QACI,WACA,YACA,WACF,SAASC,EAAOC,EAAQC,GACtB,IAAIC,EAAOH,EAAOG,KACdC,EAAMH,EAAQG,IACdC,EAAQJ,EAAQI,MAChBC,EAAUJ,EAAMI,QAChBC,EAAYL,EAAMK,UA+OtB,OAxLS,WAsGL,SAASC,IACL,OAAIC,KAAKC,WACED,KAAKC,WAAWC,MAAMF,KAAMG,WAC3BH,KAAKI,KACNJ,KAAKI,KAAKF,MAAMF,KAAMG,gBADzB,EAKZ,OAAO,SAASE,EAAYC,EAAOC,EAAQC,EAAOC,GAC1CZ,EAAQU,KACRE,EAAUD,EACVA,EAASD,EACTA,EAAS,MAEbA,EAASA,GAAUG,OAEfZ,EAAUU,KAAYX,EAAQW,KAC9BC,EAAUD,EACVA,GAAS,GAGb,IAAIG,EAAcJ,EAEdC,IACAA,EAlFR,SAAsBI,EAAKJ,GACvB,IAAIK,KAmCJ,OAjCAL,EAAOM,QAAQ,SAASlB,GACpB,GAAID,EAAIC,EAAM,cACT,MAAM,IAAImB,MAAM,iBAGrB,IADA,IAAIC,KACGpB,GACHoB,EAAKC,QAAQrB,GACbA,EAAQA,EAAMsB,WAElBL,EAASA,EAAOM,OAAOH,MAK3BH,GAFAA,EAASnB,EAAKmB,IAEEO,OAAO,SAASxB,GAE5B,IADA,IAAIyB,EAAMT,EACHS,GAAK,CACR,GAAIzB,IAAUyB,EACV,OAAO,EAEX,GAAI1B,EAAI0B,EAAI,cAER,IADA,IAAIC,EAAaD,EAAgB,WACxBE,EAAE,EAAGA,EAAED,EAAWE,OAAOD,IAC9B,GAAID,EAAWC,KAAK3B,EAChB,OAAO,EAInByB,EAAMA,EAAIH,WAEd,OAAO,KAGAM,OAAO,GACPX,EA6CEY,CAAad,EAAYH,IAGlCA,IACAG,EA3CR,SAAqBC,EAAKJ,GAEtB,IADA,IAAIkB,EAASd,EACJW,EAAE,EAAEA,EAAEf,EAAOgB,OAAOD,IAAK,CAC9B,IAAII,EAAO,IAAIC,SACfD,EAAKE,UAAYnB,OAAOoB,OAAOJ,EAAQG,WACvCF,EAAKI,UAAYL,EACjBC,EAAKT,WAAa,KAClBtB,EAAM+B,EAAKE,UAAUrB,EAAOe,GAAGM,WAC/BF,EAAKE,UAAUG,UAAYxB,EAAOe,GAClCG,EAAUC,EAGd,OAAOD,EA+BWO,CAAYtB,EAAYH,IAG1C,IAAI0B,EAAY5B,EAAM4B,WAAa,GAC/BtB,EAAO,IAAIgB,SACP,mBAAqBM,EAAY,6KAD9B,GA4CX,OA/BAtB,EAAKiB,UAAYnB,OAAOoB,OAAOnB,EAAYkB,WAG3CjB,EAAKiB,UAAUM,YAAcvB,EAC7BA,EAAKM,WAAaX,EAGlBK,EAAKmB,UAAYpB,EAGZC,EAAKb,eACNa,EAAKb,aAAeA,GAGpBS,IACAI,EAAKwB,WAAa5B,GAGjBI,EAAKyB,UACNzB,EAAKyB,QAAU,SAAS/B,EAAOG,GAC3B,OAtKZ,SAAqBG,EAAMN,EAAOG,GAE9B,IAAI6B,EAAQ1B,EAAKiB,UACbU,EAAS3B,EAAKM,WAAWW,UACzBW,EAAc/B,GAAWA,EAAQ+B,YAGrC,IAAK,IAAIC,KAFOhC,GAAWA,EAAQiC,UAElBpC,EACb,GAAa,gBAATmC,EAAJ,CAKA,IAAIE,EAAOrC,EAAMmC,GACS,mBAAfnC,EAAMmC,GACbH,EAAMG,GAAUE,EAAK5C,cAAiByC,GAAsC,mBAAhBD,EAAOE,GAkB/DE,EAjBE,SAAUF,EAAMG,EAAIC,GAClB,OAAO,WACH,IAAIC,EAAM9C,KAAK+C,UAIf/C,KAAK+C,UAAYF,EAIjB,IAAIG,EAAMJ,EAAG1C,MAAMF,KAAMG,WAIzB,OAFAH,KAAK+C,UAAYD,EAEVE,GAdb,CAgBCP,EAAME,EAAMJ,EAAOE,IAEnBhD,EAAMwD,cAAcN,IAAgB,OAAPA,GAAgBA,EAAQ,IAC5DjC,OAAOwC,eAAeZ,EAAMG,EAAKE,GAEjCL,EAAMG,GAAQE,EAGtB,OAAO/B,EA8HQuC,CAAYnD,KAAMM,EAAOG,KAGnCG,EAAKwC,UACNxC,EAAKwC,QAAU,SAAS9C,EAAOE,EAAOC,GAClC,OAAOJ,EAAYC,EAAON,KAAMQ,EAAOC,KAI/CG,EAAKyB,QAAQ/B,EAAOG,GAEbG,GAIGyC","file":"../klass.js","sourcesContent":["define([\r\n    \"./arrays\",\r\n    \"./objects\",\r\n    \"./types\"\r\n],function(arrays,objects,types){\r\n    var uniq = arrays.uniq,\r\n        has = objects.has,\r\n        mixin = objects.mixin,\r\n        isArray = types.isArray,\r\n        isDefined = types.isDefined;\r\n\r\n/* for reference \r\n function klass(props,parent) {\r\n    var ctor = function(){\r\n        this._construct();\r\n    };\r\n    ctor.prototype = props;\r\n    if (parent) {\r\n        ctor._proto_ = parent;\r\n        props.__proto__ = parent.prototype;\r\n    }\r\n    return ctor;\r\n}\r\n\r\n// Type some JavaScript code here.\r\nlet animal = klass({\r\n  _construct(){\r\n      this.name = this.name + \",hi\";\r\n  },\r\n    \r\n  name: \"Animal\",\r\n  eat() {         // [[HomeObject]] == animal\r\n    alert(`${this.name} eats.`);\r\n  }\r\n    \r\n    \r\n});\r\n\r\n\r\nlet rabbit = klass({\r\n  name: \"Rabbit\",\r\n  _construct(){\r\n      super._construct();\r\n  },\r\n  eat() {         // [[HomeObject]] == rabbit\r\n    super.eat();\r\n  }\r\n},animal);\r\n\r\nlet longEar = klass({\r\n  name: \"Long Ear\",\r\n  eat() {         // [[HomeObject]] == longEar\r\n    super.eat();\r\n  }\r\n},rabbit);\r\n*/\r\n    \r\n    function inherit(ctor, base) {\r\n        var f = function() {};\r\n        f.prototype = base.prototype;\r\n\r\n        ctor.prototype = new f();\r\n    }\r\n\r\n    var f1 = function() {\r\n        function extendClass(ctor, props, options) {\r\n            // Copy the properties to the prototype of the class.\r\n            var proto = ctor.prototype,\r\n                _super = ctor.superclass.prototype,\r\n                noOverrided = options && options.noOverrided,\r\n                overrides = options && options.overrides || {};\r\n\r\n            for (var name in props) {\r\n                if (name === \"constructor\") {\r\n                    continue;\r\n                }\r\n\r\n                // Check if we're overwriting an existing function\r\n                var prop = props[name];\r\n                if (typeof props[name] == \"function\") {\r\n                    proto[name] =  !prop._constructor && !noOverrided && typeof _super[name] == \"function\" ?\r\n                          (function(name, fn, superFn) {\r\n                            return function() {\r\n                                var tmp = this.overrided;\r\n\r\n                                // Add a new ._super() method that is the same method\r\n                                // but on the super-class\r\n                                this.overrided = superFn;\r\n\r\n                                // The method only need to be bound temporarily, so we\r\n                                // remove it when we're done executing\r\n                                var ret = fn.apply(this, arguments);\r\n\r\n                                this.overrided = tmp;\r\n\r\n                                return ret;\r\n                            };\r\n                        })(name, prop, _super[name]) :\r\n                        prop;\r\n                } else if (types.isPlainObject(prop) && prop!==null && (prop.get)) {\r\n                    Object.defineProperty(proto,name,prop);\r\n                } else {\r\n                    proto[name] = prop;\r\n                }\r\n            }\r\n            return ctor;\r\n        }\r\n\r\n        function serialMixins(ctor,mixins) {\r\n            var result = [];\r\n\r\n            mixins.forEach(function(mixin){\r\n                if (has(mixin,\"__mixins__\")) {\r\n                     throw new Error(\"nested mixins\");\r\n                }\r\n                var clss = [];\r\n                while (mixin) {\r\n                    clss.unshift(mixin);\r\n                    mixin = mixin.superclass;\r\n                }\r\n                result = result.concat(clss);\r\n            });\r\n\r\n            result = uniq(result);\r\n\r\n            result = result.filter(function(mixin){\r\n                var cls = ctor;\r\n                while (cls) {\r\n                    if (mixin === cls) {\r\n                        return false;\r\n                    }\r\n                    if (has(cls,\"__mixins__\")) {\r\n                        var clsMixines = cls[\"__mixins__\"];\r\n                        for (var i=0; i<clsMixines.length;i++) {\r\n                            if (clsMixines[i]===mixin) {\r\n                                return false;\r\n                            }\r\n                        }\r\n                    }\r\n                    cls = cls.superclass;\r\n                }\r\n                return true;\r\n            });\r\n\r\n            if (result.length>0) {\r\n                return result;\r\n            } else {\r\n                return false;\r\n            }\r\n        }\r\n\r\n        function mergeMixins(ctor,mixins) {\r\n            var newCtor =ctor;\r\n            for (var i=0;i<mixins.length;i++) {\r\n                var xtor = new Function();\r\n                xtor.prototype = Object.create(newCtor.prototype);\r\n                xtor.__proto__ = newCtor;\r\n                xtor.superclass = null;\r\n                mixin(xtor.prototype,mixins[i].prototype);\r\n                xtor.prototype.__mixin__ = mixins[i];\r\n                newCtor = xtor;\r\n            }\r\n\r\n            return newCtor;\r\n        }\r\n\r\n        function _constructor ()  {\r\n            if (this._construct) {\r\n                return this._construct.apply(this, arguments);\r\n            } else  if (this.init) {\r\n                return this.init.apply(this, arguments);\r\n            }\r\n        }\r\n\r\n        return function createClass(props, parent, mixins,options) {\r\n            if (isArray(parent)) {\r\n                options = mixins;\r\n                mixins = parent;\r\n                parent = null;\r\n            }\r\n            parent = parent || Object;\r\n\r\n            if (isDefined(mixins) && !isArray(mixins)) {\r\n                options = mixins;\r\n                mixins = false;\r\n            }\r\n\r\n            var innerParent = parent;\r\n\r\n            if (mixins) {\r\n                mixins = serialMixins(innerParent,mixins);\r\n            }\r\n\r\n            if (mixins) {\r\n                innerParent = mergeMixins(innerParent,mixins);\r\n            }\r\n\r\n            var klassName = props.klassName || \"\",\r\n                ctor = new Function(\r\n                    \"return function \" + klassName + \"() {\" +\r\n                    \"var inst = this,\" +\r\n                    \" ctor = arguments.callee;\" +\r\n                    \"if (!(inst instanceof ctor)) {\" +\r\n                    \"inst = Object.create(ctor.prototype);\" +\r\n                    \"}\" +\r\n                    \"return ctor._constructor.apply(inst, arguments) || inst;\" + \r\n                    \"}\"\r\n                )();\r\n\r\n\r\n            // Populate our constructed prototype object\r\n            ctor.prototype = Object.create(innerParent.prototype);\r\n\r\n            // Enforce the constructor to be what we expect\r\n            ctor.prototype.constructor = ctor;\r\n            ctor.superclass = parent;\r\n\r\n            // And make this class extendable\r\n            ctor.__proto__ = innerParent;\r\n\r\n\r\n            if (!ctor._constructor) {\r\n                ctor._constructor = _constructor;\r\n            } \r\n\r\n            if (mixins) {\r\n                ctor.__mixins__ = mixins;\r\n            }\r\n\r\n            if (!ctor.partial) {\r\n                ctor.partial = function(props, options) {\r\n                    return extendClass(this, props, options);\r\n                };\r\n            }\r\n            if (!ctor.inherit) {\r\n                ctor.inherit = function(props, mixins,options) {\r\n                    return createClass(props, this, mixins,options);\r\n                };\r\n            }\r\n\r\n            ctor.partial(props, options);\r\n\r\n            return ctor;\r\n        };\r\n    }\r\n\r\n    var createClass = f1();\r\n\r\n    return createClass;\r\n})"]}