{"version":3,"sources":["arrays.js"],"names":["define","types","objects","filter","Array","prototype","isArrayLike","flatten","array","result","i","length","item","j","push","compact","call","first","items","n","slice","each","inArray","indexOf","makeArray","obj","offset","startWith","concat","map","elements","callback","value","key","values","uniq","idx"],"mappings":";;;;;;;AAAAA,QACC,UACG,aACF,SAASC,EAAMC,GAChB,IAAIC,EAASC,MAAMC,UAAUF,OAC5BG,EAAcL,EAAMK,YAQlB,SAASC,EAAQC,GACb,GAAIF,EAAYE,GAAQ,CAEpB,IADA,IAAIC,KACKC,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAAK,CACnC,IAAIE,EAAOJ,EAAME,GACjB,GAAIJ,EAAYM,GACZ,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAKD,OAAQE,IAC7BJ,EAAOK,KAAKF,EAAKC,SAGrBJ,EAAOK,KAAKF,GAGpB,OAAOH,EAEP,OAAOD,EAoEf,OACIO,QA1FJ,SAAiBP,GACb,OAAOL,EAAOa,KAAKR,EAAO,SAASI,GAC/B,OAAe,MAARA,KA0FXK,MAAQ,SAASC,EAAMC,GACnB,OAAIA,EACOD,EAAME,MAAM,EAAED,GAEdD,EAAM,IAIxBG,KAAMnB,EAAQmB,KAEXd,QAASA,EAETe,QAlEJ,SAAiBV,EAAMJ,GACnB,IAAKA,EACD,OAAQ,EAEZ,IAAIE,EAEJ,GAAIF,EAAMe,QACN,OAAOf,EAAMe,QAAQX,GAIzB,IADAF,EAAIF,EAAMG,OACHD,KACH,GAAIF,EAAME,KAAOE,EACb,OAAOF,EAIf,OAAQ,GAmDRc,UAhDJ,SAAmBC,EAAKC,EAAQC,GAC7B,OAAIrB,EAAYmB,IACPE,OAAiBC,OAAOxB,MAAMC,UAAUe,MAAMJ,KAAKS,EAAKC,GAAU,KAInED,IA4CPI,IAzCJ,SAAaC,EAAUC,GACnB,IAAIC,EACAtB,EAAGuB,EADIC,KAEX,GAAI5B,EAAYwB,GACZ,IAAKpB,EAAI,EAAGA,EAAIoB,EAASnB,OAAQD,IAEhB,OADbsB,EAAQD,EAASf,KAAKc,EAASpB,GAAIoB,EAASpB,GAAIA,KAC7BwB,EAAOpB,KAAKkB,QAGnC,IAAKC,KAAOH,EAEK,OADbE,EAAQD,EAASf,KAAKc,EAASG,GAAMH,EAASG,GAAMA,KACjCC,EAAOpB,KAAKkB,GAEvC,OAAOzB,EAAQ2B,IA8BfC,KA3BJ,SAAc3B,GACV,OAAOL,EAAOa,KAAKR,EAAO,SAASI,EAAMwB,GACrC,OAAO5B,EAAMe,QAAQX,IAASwB","file":"../arrays.js","sourcesContent":["define([\r\n\t\"./types\",\r\n    \"./objects\"\r\n],function(types,objects){\r\n\tvar filter = Array.prototype.filter,\r\n\t\tisArrayLike = types.isArrayLike;\r\n\r\n    function compact(array) {\r\n        return filter.call(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    function flatten(array) {\r\n        if (isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function makeArray(obj, offset, startWith) {\r\n       if (isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\r\n    return {\r\n        compact: compact,\r\n\r\n        first : function(items,n) {\r\n            if (n) {\r\n                return items.slice(0,n);\r\n            } else {\r\n                return items[0];\r\n            }\r\n        },\r\n\r\n\t    each: objects.each,\r\n\r\n        flatten: flatten,\r\n\r\n        inArray: inArray,\r\n\r\n        makeArray: makeArray,\r\n\r\n        map : map,\r\n        \r\n        uniq : uniq\r\n\r\n    }\r\n});"]}