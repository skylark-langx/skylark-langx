{"version":3,"sources":["arrays.js"],"names":["define","types","objects","compact","array","filter","call","item","flatten","isArrayLike","result","i","length","j","push","inArray","indexOf","makeArray","obj","offset","startWith","concat","Array","prototype","slice","map","elements","callback","value","key","values","uniq","idx","first","items","n","each"],"mappings":";;;;;;;AAAAA,QACC,UACG,aACF,SAASC,EAAMC,GAIb,QAASC,GAAQC,GACb,MAAOC,GAAOC,KAAKF,EAAO,SAASG,GAC/B,MAAe,OAARA,IAIf,QAASC,GAAQJ,GACb,GAAIK,EAAYL,GAAQ,CAEpB,IAAK,GADDM,MACKC,EAAI,EAAGA,EAAIP,EAAMQ,OAAQD,IAAK,CACnC,GAAIJ,GAAOH,EAAMO,EACjB,IAAIF,EAAYF,GACZ,IAAK,GAAIM,GAAI,EAAGA,EAAIN,EAAKK,OAAQC,IAC7BH,EAAOI,KAAKP,EAAKM,QAGrBH,GAAOI,KAAKP,GAGpB,MAAOG,GAEP,MAAON,GAiBf,QAASW,GAAQR,EAAMH,GACnB,IAAKA,EACD,QAEJ,IAAIO,EAEJ,IAAIP,EAAMY,QACN,MAAOZ,GAAMY,QAAQT,EAIzB,KADAI,EAAIP,EAAMQ,OACHD,KACH,GAAIP,EAAMO,KAAOJ,EACb,MAAOI,EAIf,UAGJ,QAASM,GAAUC,EAAKC,EAAQC,GAC7B,MAAIX,GAAYS,IACPE,OAAiBC,OAAOC,MAAMC,UAAUC,MAAMlB,KAAKY,EAAKC,GAAU,KAInED,GAGX,QAASO,GAAIC,EAAUC,GACnB,GAAIC,GACAjB,EAAGkB,EADIC,IAEX,IAAIrB,EAAYiB,GACZ,IAAKf,EAAI,EAAGA,EAAIe,EAASd,OAAQD,IAC7BiB,EAAQD,EAASrB,KAAKoB,EAASf,GAAIe,EAASf,GAAIA,GACnC,MAATiB,GAAeE,EAAOhB,KAAKc,OAGnC,KAAKC,IAAOH,GACRE,EAAQD,EAASrB,KAAKoB,EAASG,GAAMH,EAASG,GAAMA,GACvC,MAATD,GAAeE,EAAOhB,KAAKc,EAEvC,OAAOpB,GAAQsB,GAGnB,QAASC,GAAK3B,GACV,MAAOC,GAAOC,KAAKF,EAAO,SAASG,EAAMyB,GACrC,MAAO5B,GAAMY,QAAQT,IAASyB,IAxFzC,GAAI3B,GAASiB,MAAMC,UAAUlB,OAC5BI,EAAcR,EAAMQ,WA2FlB,QACIN,QAASA,EAET8B,MAAQ,SAASC,EAAMC,GACnB,MAAIA,GACOD,EAAMV,MAAM,EAAEW,GAEdD,EAAM,IAIxBE,KAAMlC,EAAQkC,KAEX5B,QAASA,EAETO,QAASA,EAETE,UAAWA,EAEXQ,IAAMA,EAENM,KAAOA","file":"../arrays.js","sourcesContent":["define([\r\n\t\"./types\",\r\n    \"./objects\"\r\n],function(types,objects){\r\n\tvar filter = Array.prototype.filter,\r\n\t\tisArrayLike = types.isArrayLike;\r\n\r\n    function compact(array) {\r\n        return filter.call(array, function(item) {\r\n            return item != null;\r\n        });\r\n    }\r\n\r\n    function flatten(array) {\r\n        if (isArrayLike(array)) {\r\n            var result = [];\r\n            for (var i = 0; i < array.length; i++) {\r\n                var item = array[i];\r\n                if (isArrayLike(item)) {\r\n                    for (var j = 0; j < item.length; j++) {\r\n                        result.push(item[j]);\r\n                    }\r\n                } else {\r\n                    result.push(item);\r\n                }\r\n            }\r\n            return result;\r\n        } else {\r\n            return array;\r\n        }\r\n        //return array.length > 0 ? concat.apply([], array) : array;\r\n    }\r\n\r\n    function grep(array, callback) {\r\n        var out = [];\r\n\r\n        each(array, function(i, item) {\r\n            if (callback(item, i)) {\r\n                out.push(item);\r\n            }\r\n        });\r\n\r\n        return out;\r\n    }\r\n\r\n    function inArray(item, array) {\r\n        if (!array) {\r\n            return -1;\r\n        }\r\n        var i;\r\n\r\n        if (array.indexOf) {\r\n            return array.indexOf(item);\r\n        }\r\n\r\n        i = array.length;\r\n        while (i--) {\r\n            if (array[i] === item) {\r\n                return i;\r\n            }\r\n        }\r\n\r\n        return -1;\r\n    }\r\n\r\n    function makeArray(obj, offset, startWith) {\r\n       if (isArrayLike(obj) ) {\r\n        return (startWith || []).concat(Array.prototype.slice.call(obj, offset || 0));\r\n      }\r\n\r\n      // array of single index\r\n      return [ obj ];             \r\n    }\r\n\r\n    function map(elements, callback) {\r\n        var value, values = [],\r\n            i, key\r\n        if (isArrayLike(elements))\r\n            for (i = 0; i < elements.length; i++) {\r\n                value = callback.call(elements[i], elements[i], i);\r\n                if (value != null) values.push(value)\r\n            }\r\n        else\r\n            for (key in elements) {\r\n                value = callback.call(elements[key], elements[key], key);\r\n                if (value != null) values.push(value)\r\n            }\r\n        return flatten(values)\r\n    }\r\n\r\n    function uniq(array) {\r\n        return filter.call(array, function(item, idx) {\r\n            return array.indexOf(item) == idx;\r\n        })\r\n    }\r\n\r\n    return {\r\n        compact: compact,\r\n\r\n        first : function(items,n) {\r\n            if (n) {\r\n                return items.slice(0,n);\r\n            } else {\r\n                return items[0];\r\n            }\r\n        },\r\n\r\n\t    each: objects.each,\r\n\r\n        flatten: flatten,\r\n\r\n        inArray: inArray,\r\n\r\n        makeArray: makeArray,\r\n\r\n        map : map,\r\n        \r\n        uniq : uniq\r\n\r\n    }\r\n});"]}