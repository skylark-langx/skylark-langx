{"version":3,"sources":["objects.js"],"names":["define","types","eq","deepEq","hasOwnProperty","Object","prototype","slice","Array","isBoolean","isFunction","isObject","isPlainObject","isArray","keysFunc","defaults","SymbolProto","Symbol","allKeys","obj","keys","key","push","has","path","call","length","i","_mixin","target","source","deep","safe","undefined","_parseMixinArgs","args","params","arguments","shift","pop","sources","mixin","apply","this","forEach","a","b","aStack","bStack","type","className","toString","valueOf","areArrays","aCtor","constructor","bCtor","clone","src","checkCloneMethod","copy","index","l","each","callback","value","undef","extend","arg","isEqual","isMatch","object","attrs","removeItem","items","item","idx","indexOf","splice","result","fallback","prop","safeMixin","values","_"],"mappings":"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","file":"../objects.js","sourcesContent":["define([\r\n\t\"./types\"\r\n],function(types){\r\n\tvar hasOwnProperty = Object.prototype.hasOwnProperty,\r\n        slice = Array.prototype.slice,\r\n        isBoolean = types.isBoolean,\r\n        isFunction = types.isFunction,\r\n\t\tisObject = types.isObject,\r\n\t\tisPlainObject = types.isPlainObject,\r\n\t\tisArray = types.isArray;\r\n\r\n     // An internal function for creating assigner functions.\r\n    function createAssigner(keysFunc, defaults) {\r\n        return function(obj) {\r\n          var length = arguments.length;\r\n          if (defaults) obj = Object(obj);  \r\n          if (length < 2 || obj == null) return obj;\r\n          for (var index = 1; index < length; index++) {\r\n            var source = arguments[index],\r\n                keys = keysFunc(source),\r\n                l = keys.length;\r\n            for (var i = 0; i < l; i++) {\r\n              var key = keys[i];\r\n              if (!defaults || obj[key] === void 0) obj[key] = source[key];\r\n            }\r\n          }\r\n          return obj;\r\n       };\r\n    }\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    var eq, deepEq;\r\n    var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\r\n\r\n    eq = function(a, b, aStack, bStack) {\r\n        // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n        // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n        if (a === b) return a !== 0 || 1 / a === 1 / b;\r\n        // `null` or `undefined` only equal to itself (strict comparison).\r\n        if (a == null || b == null) return false;\r\n        // `NaN`s are equivalent, but non-reflexive.\r\n        if (a !== a) return b !== b;\r\n        // Exhaust primitive checks\r\n        var type = typeof a;\r\n        if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\r\n        return deepEq(a, b, aStack, bStack);\r\n    };\r\n\r\n    // Internal recursive comparison function for `isEqual`.\r\n    deepEq = function(a, b, aStack, bStack) {\r\n        // Unwrap any wrapped objects.\r\n        //if (a instanceof _) a = a._wrapped;\r\n        //if (b instanceof _) b = b._wrapped;\r\n        // Compare `[[Class]]` names.\r\n        var className = toString.call(a);\r\n        if (className !== toString.call(b)) return false;\r\n        switch (className) {\r\n            // Strings, numbers, regular expressions, dates, and booleans are compared by value.\r\n            case '[object RegExp]':\r\n            // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\r\n            case '[object String]':\r\n                // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n                // equivalent to `new String(\"5\")`.\r\n                return '' + a === '' + b;\r\n            case '[object Number]':\r\n                // `NaN`s are equivalent, but non-reflexive.\r\n                // Object(NaN) is equivalent to NaN.\r\n                if (+a !== +a) return +b !== +b;\r\n                // An `egal` comparison is performed for other numeric values.\r\n                return +a === 0 ? 1 / +a === 1 / b : +a === +b;\r\n            case '[object Date]':\r\n            case '[object Boolean]':\r\n                // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n                // millisecond representations. Note that invalid dates with millisecond representations\r\n                // of `NaN` are not equivalent.\r\n                return +a === +b;\r\n            case '[object Symbol]':\r\n                return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\r\n        }\r\n\r\n        var areArrays = className === '[object Array]';\r\n        if (!areArrays) {\r\n            if (typeof a != 'object' || typeof b != 'object') return false;\r\n            // Objects with different constructors are not equivalent, but `Object`s or `Array`s\r\n            // from different frames are.\r\n            var aCtor = a.constructor, bCtor = b.constructor;\r\n            if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor &&\r\n                               isFunction(bCtor) && bCtor instanceof bCtor)\r\n                          && ('constructor' in a && 'constructor' in b)) {\r\n                return false;\r\n            }\r\n        }\r\n        // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n        // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n\r\n        // Initializing stack of traversed objects.\r\n        // It's done here since we only need them for objects and arrays comparison.\r\n        aStack = aStack || [];\r\n        bStack = bStack || [];\r\n        var length = aStack.length;\r\n        while (length--) {\r\n            // Linear search. Performance is inversely proportional to the number of\r\n            // unique nested structures.\r\n            if (aStack[length] === a) return bStack[length] === b;\r\n        }\r\n\r\n        // Add the first object to the stack of traversed objects.\r\n        aStack.push(a);\r\n        bStack.push(b);\r\n\r\n        // Recursively compare objects and arrays.\r\n        if (areArrays) {\r\n            // Compare array lengths to determine if a deep comparison is necessary.\r\n            length = a.length;\r\n            if (length !== b.length) return false;\r\n            // Deep compare the contents, ignoring non-numeric properties.\r\n            while (length--) {\r\n                if (!eq(a[length], b[length], aStack, bStack)) return false;\r\n            }\r\n        } else {\r\n            // Deep compare objects.\r\n            var keys = Object.keys(a), key;\r\n            length = keys.length;\r\n            // Ensure that both objects contain the same number of properties before comparing deep equality.\r\n            if (Object.keys(b).length !== length) return false;\r\n            while (length--) {\r\n                // Deep compare each member\r\n                key = keys[length];\r\n                if (!(b[key]!==undefined && eq(a[key], b[key], aStack, bStack))) return false;\r\n            }\r\n        }\r\n        // Remove the first object from the stack of traversed objects.\r\n        aStack.pop();\r\n        bStack.pop();\r\n        return true;\r\n    };\r\n\r\n    // Retrieve all the property names of an object.\r\n    function allKeys(obj) {\r\n        if (!isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function each(obj, callback) {\r\n        var length, key, i, undef, value;\r\n\r\n        if (obj) {\r\n            length = obj.length;\r\n\r\n            if (length === undef) {\r\n                // Loop object items\r\n                for (key in obj) {\r\n                    if (obj.hasOwnProperty(key)) {\r\n                        value = obj[key];\r\n                        if (callback.call(value, key, value) === false) {\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // Loop array items\r\n                for (i = 0; i < length; i++) {\r\n                    value = obj[i];\r\n                    if (callback.call(value, i, value) === false) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function extend(target) {\r\n        var deep, args = slice.call(arguments, 1);\r\n        if (typeof target == 'boolean') {\r\n            deep = target\r\n            target = args.shift()\r\n        }\r\n        if (args.length == 0) {\r\n            args = [target];\r\n            target = this;\r\n        }\r\n        args.forEach(function(arg) {\r\n            mixin(target, arg, deep);\r\n        });\r\n        return target;\r\n    }\r\n\r\n    // Retrieve the names of an object's own properties.\r\n    // Delegates to **ECMAScript 5**'s native `Object.keys`.\r\n    function keys(obj) {\r\n        if (isObject(obj)) return [];\r\n        var keys = [];\r\n        for (var key in obj) if (has(obj, key)) keys.push(key);\r\n        return keys;\r\n    }\r\n\r\n    function has(obj, path) {\r\n        if (!isArray(path)) {\r\n            return obj != null && hasOwnProperty.call(obj, path);\r\n        }\r\n        var length = path.length;\r\n        for (var i = 0; i < length; i++) {\r\n            var key = path[i];\r\n            if (obj == null || !hasOwnProperty.call(obj, key)) {\r\n                return false;\r\n            }\r\n            obj = obj[key];\r\n        }\r\n        return !!length;\r\n    }\r\n\r\n   // Perform a deep comparison to check if two objects are equal.\r\n    function isEqual(a, b) {\r\n        return eq(a, b);\r\n    }\r\n\r\n    // Returns whether an object has a given set of `key:value` pairs.\r\n    function isMatch(object, attrs) {\r\n        var keys = keys(attrs), length = keys.length;\r\n        if (object == null) return !length;\r\n        var obj = Object(object);\r\n        for (var i = 0; i < length; i++) {\r\n          var key = keys[i];\r\n          if (attrs[key] !== obj[key] || !(key in obj)) return false;\r\n        }\r\n        return true;\r\n    }    \r\n\r\n    function _mixin(target, source, deep, safe) {\r\n        for (var key in source) {\r\n            //if (!source.hasOwnProperty(key)) {\r\n            //    continue;\r\n            //}\r\n            if (safe && target[key] !== undefined) {\r\n                continue;\r\n            }\r\n            if (deep && (isPlainObject(source[key]) || isArray(source[key]))) {\r\n                if (isPlainObject(source[key]) && !isPlainObject(target[key])) {\r\n                    target[key] = {};\r\n                }\r\n                if (isArray(source[key]) && !isArray(target[key])) {\r\n                    target[key] = [];\r\n                }\r\n                _mixin(target[key], source[key], deep, safe);\r\n            } else if (source[key] !== undefined) {\r\n                target[key] = source[key]\r\n            }\r\n        }\r\n        return target;\r\n    }\r\n\r\n    function _parseMixinArgs(args) {\r\n        var params = slice.call(arguments, 0),\r\n            target = params.shift(),\r\n            deep = false;\r\n        if (isBoolean(params[params.length - 1])) {\r\n            deep = params.pop();\r\n        }\r\n\r\n        return {\r\n            target: target,\r\n            sources: params,\r\n            deep: deep\r\n        };\r\n    }\r\n\r\n    function mixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, false);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    function removeItem(items, item) {\r\n        if (isArray(items)) {\r\n            var idx = items.indexOf(item);\r\n            if (idx != -1) {\r\n                items.splice(idx, 1);\r\n            }\r\n        } else if (isPlainObject(items)) {\r\n            for (var key in items) {\r\n                if (items[key] == item) {\r\n                    delete items[key];\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    function result(obj, path, fallback) {\r\n        if (!isArray(path)) {\r\n            path = [path]\r\n        };\r\n        var length = path.length;\r\n        if (!length) {\r\n          return isFunction(fallback) ? fallback.call(obj) : fallback;\r\n        }\r\n        for (var i = 0; i < length; i++) {\r\n          var prop = obj == null ? void 0 : obj[path[i]];\r\n          if (prop === void 0) {\r\n            prop = fallback;\r\n            i = length; // Ensure we don't continue iterating.\r\n          }\r\n          obj = isFunction(prop) ? prop.call(obj) : prop;\r\n        }\r\n\r\n        return obj;\r\n    }\r\n\r\n    function safeMixin() {\r\n        var args = _parseMixinArgs.apply(this, arguments);\r\n\r\n        args.sources.forEach(function(source) {\r\n            _mixin(args.target, source, args.deep, true);\r\n        });\r\n        return args.target;\r\n    }\r\n\r\n    // Retrieve the values of an object's properties.\r\n    function values(obj) {\r\n        var keys = _.keys(obj);\r\n        var length = keys.length;\r\n        var values = Array(length);\r\n        for (var i = 0; i < length; i++) {\r\n            values[i] = obj[keys[i]];\r\n        }\r\n        return values;\r\n    }\r\n\r\n\r\n    \r\n    function clone( /*anything*/ src,checkCloneMethod) {\r\n        var copy;\r\n        if (src === undefined || src === null) {\r\n            copy = src;\r\n        } else if (checkCloneMethod && src.clone) {\r\n            copy = src.clone();\r\n        } else if (isArray(src)) {\r\n            copy = [];\r\n            for (var i = 0; i < src.length; i++) {\r\n                copy.push(clone(src[i]));\r\n            }\r\n        } else if (isPlainObject(src)) {\r\n            copy = {};\r\n            for (var key in src) {\r\n                copy[key] = clone(src[key]);\r\n            }\r\n        } else {\r\n            copy = src;\r\n        }\r\n\r\n        return copy;\r\n\r\n    }\r\n\r\n    return {\r\n        allKeys: allKeys,\r\n\r\n        clone: clone,\r\n\r\n        defaults : createAssigner(allKeys, true),\r\n\r\n        each : each,\r\n\r\n        extend : extend,\r\n\r\n        has: has,\r\n\r\n        isEqual: isEqual,\r\n\r\n        isMatch: isMatch,\r\n\r\n        keys: keys,\r\n\r\n        mixin: mixin,\r\n\r\n        removeItem: removeItem,\r\n\r\n        result : result,\r\n        \r\n        safeMixin: safeMixin,\r\n\r\n        values: values\r\n    };\r\n\r\n});"]}