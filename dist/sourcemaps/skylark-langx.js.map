{"version":3,"sources":["skylark-langx.js"],"names":["define","ns","arrays","klass","QueryResults","results","isPromise","then","addIterativeMethod","method","args","arguments","result","Deferred","when","Array","prototype","apply","Object","delegate","total","length","ArrayStore","klassName","queryEngine","query","options","Error","queryObject","object","key","required","test","this","execute","array","arr","callback","thisObject","value","i","l","out","split","cache","buildFn","call","push","filter","sortSet","sort","a","b","aValue","attribute","bValue","valueOf","descending","start","count","slice","Infinity","matches","idProperty","get","id","data","index","getIdentity","put","Math","random","overwrite","add","remove","splice","setData","items","identifier","init","aspect","async","datetimes","Evented","funcs","hoster","numbers","objects","strings","isEqual","mixin","isEmptyObject","clone","uniqueId","Stateful","inherit","_construct","attributes","attrs","cid","cidPrefix","collection","parse","defaults","set","changed","validationError","idAttribute","toJSON","attr","has","val","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","_pending","trigger","clear","hasChanged","undefined","changedAttributes","diff","old","previous","previousAttributes","constructor","isNew","isValid","validate","error","topic","types","skylark","Emitter","concat","indexOf","isFunction","safeMixin","_uid","langx","createEvent","funcArg","context","arg","idx","payload","getQueryParams","url","segs","window","location","href","params","forEach","queryParam","nv","toPixel","parseFloat","uid","obj","URL","webkitURL","main"],"mappings":"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","file":"../skylark-langx.js","sourcesContent":["define('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-langx/arrays',[\r\n\t\"skylark-langx-arrays\"\r\n],function(arrays){\r\n  return arrays;\r\n});\ndefine('skylark-langx/klass',[\r\n    \"skylark-langx-klass\"\r\n],function(klass){\r\n    return klass;\r\n});\ndefine('skylark-langx/ArrayStore',[\r\n    \"./klass\"\r\n],function(klass){\r\n    var SimpleQueryEngine = function(query, options){\r\n        // summary:\r\n        //      Simple query engine that matches using filter functions, named filter\r\n        //      functions or objects by name-value on a query object hash\r\n        //\r\n        // description:\r\n        //      The SimpleQueryEngine provides a way of getting a QueryResults through\r\n        //      the use of a simple object hash as a filter.  The hash will be used to\r\n        //      match properties on data objects with the corresponding value given. In\r\n        //      other words, only exact matches will be returned.\r\n        //\r\n        //      This function can be used as a template for more complex query engines;\r\n        //      for example, an engine can be created that accepts an object hash that\r\n        //      contains filtering functions, or a string that gets evaluated, etc.\r\n        //\r\n        //      When creating a new dojo.store, simply set the store's queryEngine\r\n        //      field as a reference to this function.\r\n        //\r\n        // query: Object\r\n        //      An object hash with fields that may match fields of items in the store.\r\n        //      Values in the hash will be compared by normal == operator, but regular expressions\r\n        //      or any object that provides a test() method are also supported and can be\r\n        //      used to match strings by more complex expressions\r\n        //      (and then the regex's or object's test() method will be used to match values).\r\n        //\r\n        // options: dojo/store/api/Store.QueryOptions?\r\n        //      An object that contains optional information such as sort, start, and count.\r\n        //\r\n        // returns: Function\r\n        //      A function that caches the passed query under the field \"matches\".  See any\r\n        //      of the \"query\" methods on dojo.stores.\r\n        //\r\n        // example:\r\n        //      Define a store with a reference to this engine, and set up a query method.\r\n        //\r\n        //  |   var myStore = function(options){\r\n        //  |       //  ...more properties here\r\n        //  |       this.queryEngine = SimpleQueryEngine;\r\n        //  |       //  define our query method\r\n        //  |       this.query = function(query, options){\r\n        //  |           return QueryResults(this.queryEngine(query, options)(this.data));\r\n        //  |       };\r\n        //  |   };\r\n\r\n        // create our matching query function\r\n        switch(typeof query){\r\n            default:\r\n                throw new Error(\"Can not query with a \" + typeof query);\r\n            case \"object\": case \"undefined\":\r\n                var queryObject = query;\r\n                query = function(object){\r\n                    for(var key in queryObject){\r\n                        var required = queryObject[key];\r\n                        if(required && required.test){\r\n                            // an object can provide a test method, which makes it work with regex\r\n                            if(!required.test(object[key], object)){\r\n                                return false;\r\n                            }\r\n                        }else if(required != object[key]){\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                };\r\n                break;\r\n            case \"string\":\r\n                // named query\r\n                if(!this[query]){\r\n                    throw new Error(\"No filter function \" + query + \" was found in store\");\r\n                }\r\n                query = this[query];\r\n                // fall through\r\n            case \"function\":\r\n                // fall through\r\n        }\r\n        \r\n        function filter(arr, callback, thisObject){\r\n            // summary:\r\n            //      Returns a new Array with those items from arr that match the\r\n            //      condition implemented by callback.\r\n            // arr: Array\r\n            //      the array to iterate over.\r\n            // callback: Function|String\r\n            //      a function that is invoked with three arguments (item,\r\n            //      index, array). The return of this function is expected to\r\n            //      be a boolean which determines whether the passed-in item\r\n            //      will be included in the returned array.\r\n            // thisObject: Object?\r\n            //      may be used to scope the call to callback\r\n            // returns: Array\r\n            // description:\r\n            //      This function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when\r\n            //      run over sparse arrays, this implementation passes the \"holes\" in the sparse array to\r\n            //      the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array.\r\n            //      For more details, see:\r\n            //      https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter\r\n            // example:\r\n            //  | // returns [2, 3, 4]\r\n            //  | array.filter([1, 2, 3, 4], function(item){ return item>1; });\r\n\r\n            // TODO: do we need \"Ctr\" here like in map()?\r\n            var i = 0, l = arr && arr.length || 0, out = [], value;\r\n            if(l && typeof arr == \"string\") arr = arr.split(\"\");\r\n            if(typeof callback == \"string\") callback = cache[callback] || buildFn(callback);\r\n            if(thisObject){\r\n                for(; i < l; ++i){\r\n                    value = arr[i];\r\n                    if(callback.call(thisObject, value, i, arr)){\r\n                        out.push(value);\r\n                    }\r\n                }\r\n            }else{\r\n                for(; i < l; ++i){\r\n                    value = arr[i];\r\n                    if(callback(value, i, arr)){\r\n                        out.push(value);\r\n                    }\r\n                }\r\n            }\r\n            return out; // Array\r\n        }\r\n\r\n        function execute(array){\r\n            // execute the whole query, first we filter\r\n            var results = filter(array, query);\r\n            // next we sort\r\n            var sortSet = options && options.sort;\r\n            if(sortSet){\r\n                results.sort(typeof sortSet == \"function\" ? sortSet : function(a, b){\r\n                    for(var sort, i=0; sort = sortSet[i]; i++){\r\n                        var aValue = a[sort.attribute];\r\n                        var bValue = b[sort.attribute];\r\n                        // valueOf enables proper comparison of dates\r\n                        aValue = aValue != null ? aValue.valueOf() : aValue;\r\n                        bValue = bValue != null ? bValue.valueOf() : bValue;\r\n                        if (aValue != bValue){\r\n                            // modified by lwf 2016/07/09\r\n                            //return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;\r\n                            return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;\r\n                        }\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n            // now we paginate\r\n            if(options && (options.start || options.count)){\r\n                var total = results.length;\r\n                results = results.slice(options.start || 0, (options.start || 0) + (options.count || Infinity));\r\n                results.total = total;\r\n            }\r\n            return results;\r\n        }\r\n        execute.matches = query;\r\n        return execute;\r\n    };\r\n\r\n    var QueryResults = function(results){\r\n        // summary:\r\n        //      A function that wraps the results of a store query with additional\r\n        //      methods.\r\n        // description:\r\n        //      QueryResults is a basic wrapper that allows for array-like iteration\r\n        //      over any kind of returned data from a query.  While the simplest store\r\n        //      will return a plain array of data, other stores may return deferreds or\r\n        //      promises; this wrapper makes sure that *all* results can be treated\r\n        //      the same.\r\n        //\r\n        //      Additional methods include `forEach`, `filter` and `map`.\r\n        // results: Array|dojo/promise/Promise\r\n        //      The result set as an array, or a promise for an array.\r\n        // returns:\r\n        //      An array-like object that can be used for iterating over.\r\n        // example:\r\n        //      Query a store and iterate over the results.\r\n        //\r\n        //  |   store.query({ prime: true }).forEach(function(item){\r\n        //  |       //  do something\r\n        //  |   });\r\n\r\n        if(!results){\r\n            return results;\r\n        }\r\n\r\n        var isPromise = !!results.then;\r\n        // if it is a promise it may be frozen\r\n        if(isPromise){\r\n            results = Object.delegate(results);\r\n        }\r\n        function addIterativeMethod(method){\r\n            // Always add the iterative methods so a QueryResults is\r\n            // returned whether the environment is ES3 or ES5\r\n            results[method] = function(){\r\n                var args = arguments;\r\n                var result = Deferred.when(results, function(results){\r\n                    //Array.prototype.unshift.call(args, results);\r\n                    return QueryResults(Array.prototype[method].apply(results, args));\r\n                });\r\n                // forEach should only return the result of when()\r\n                // when we're wrapping a promise\r\n                if(method !== \"forEach\" || isPromise){\r\n                    return result;\r\n                }\r\n            };\r\n        }\r\n\r\n        addIterativeMethod(\"forEach\");\r\n        addIterativeMethod(\"filter\");\r\n        addIterativeMethod(\"map\");\r\n        if(results.total == null){\r\n            results.total = Deferred.when(results, function(results){\r\n                return results.length;\r\n            });\r\n        }\r\n        return results; // Object\r\n    };\r\n\r\n    var ArrayStore = klass({\r\n        \"klassName\": \"ArrayStore\",\r\n\r\n        \"queryEngine\": SimpleQueryEngine,\r\n        \r\n        \"idProperty\": \"id\",\r\n\r\n\r\n        get: function(id){\r\n            // summary:\r\n            //      Retrieves an object by its identity\r\n            // id: Number\r\n            //      The identity to use to lookup the object\r\n            // returns: Object\r\n            //      The object in the store that matches the given id.\r\n            return this.data[this.index[id]];\r\n        },\r\n\r\n        getIdentity: function(object){\r\n            return object[this.idProperty];\r\n        },\r\n\r\n        put: function(object, options){\r\n            var data = this.data,\r\n                index = this.index,\r\n                idProperty = this.idProperty;\r\n            var id = object[idProperty] = (options && \"id\" in options) ? options.id : idProperty in object ? object[idProperty] : Math.random();\r\n            if(id in index){\r\n                // object exists\r\n                if(options && options.overwrite === false){\r\n                    throw new Error(\"Object already exists\");\r\n                }\r\n                // replace the entry in data\r\n                data[index[id]] = object;\r\n            }else{\r\n                // add the new object\r\n                index[id] = data.push(object) - 1;\r\n            }\r\n            return id;\r\n        },\r\n\r\n        add: function(object, options){\r\n            (options = options || {}).overwrite = false;\r\n            // call put with overwrite being false\r\n            return this.put(object, options);\r\n        },\r\n\r\n        remove: function(id){\r\n            // summary:\r\n            //      Deletes an object by its identity\r\n            // id: Number\r\n            //      The identity to use to delete the object\r\n            // returns: Boolean\r\n            //      Returns true if an object was removed, falsy (undefined) if no object matched the id\r\n            var index = this.index;\r\n            var data = this.data;\r\n            if(id in index){\r\n                data.splice(index[id], 1);\r\n                // now we have to reindex\r\n                this.setData(data);\r\n                return true;\r\n            }\r\n        },\r\n        query: function(query, options){\r\n            // summary:\r\n            //      Queries the store for objects.\r\n            // query: Object\r\n            //      The query to use for retrieving objects from the store.\r\n            // options: dojo/store/api/Store.QueryOptions?\r\n            //      The optional arguments to apply to the resultset.\r\n            // returns: dojo/store/api/Store.QueryResults\r\n            //      The results of the query, extended with iterative methods.\r\n            //\r\n            // example:\r\n            //      Given the following store:\r\n            //\r\n            //  |   var store = new Memory({\r\n            //  |       data: [\r\n            //  |           {id: 1, name: \"one\", prime: false },\r\n            //  |           {id: 2, name: \"two\", even: true, prime: true},\r\n            //  |           {id: 3, name: \"three\", prime: true},\r\n            //  |           {id: 4, name: \"four\", even: true, prime: false},\r\n            //  |           {id: 5, name: \"five\", prime: true}\r\n            //  |       ]\r\n            //  |   });\r\n            //\r\n            //  ...find all items where \"prime\" is true:\r\n            //\r\n            //  |   var results = store.query({ prime: true });\r\n            //\r\n            //  ...or find all items where \"even\" is true:\r\n            //\r\n            //  |   var results = store.query({ even: true });\r\n            return QueryResults(this.queryEngine(query, options)(this.data));\r\n        },\r\n\r\n        setData: function(data){\r\n            // summary:\r\n            //      Sets the given data as the source for this store, and indexes it\r\n            // data: Object[]\r\n            //      An array of objects to use as the source of data.\r\n            if(data.items){\r\n                // just for convenience with the data format IFRS expects\r\n                this.idProperty = data.identifier || this.idProperty;\r\n                data = this.data = data.items;\r\n            }else{\r\n                this.data = data;\r\n            }\r\n            this.index = {};\r\n            for(var i = 0, l = data.length; i < l; i++){\r\n                this.index[data[i][this.idProperty]] = i;\r\n            }\r\n        },\r\n\r\n        init: function(options) {\r\n            for(var i in options){\r\n                this[i] = options[i];\r\n            }\r\n            this.setData(this.data || []);\r\n        }\r\n\r\n    });\r\n\r\n\treturn ArrayStore;\r\n});\ndefine('skylark-langx/aspect',[\r\n    \"skylark-langx-aspect\"\r\n],function(aspect){\r\n  return aspect;\r\n});\ndefine('skylark-langx/async',[\r\n    \"skylark-langx-async\"\r\n],function(async){\r\n    return async;\r\n});\ndefine('skylark-langx/datetimes',[\r\n    \"skylark-langx-datetimes\"\r\n],function(datetimes){\r\n    return datetimes;\r\n});\ndefine('skylark-langx/Deferred',[\r\n    \"skylark-langx-async/Deferred\"\r\n],function(Deferred){\r\n    return Deferred;\r\n});\ndefine('skylark-langx/Emitter',[\r\n    \"skylark-langx-emitter\"\r\n],function(Evented){\r\n    return Evented;\r\n});\ndefine('skylark-langx/Evented',[\r\n    \"skylark-langx-emitter\"\r\n],function(Evented){\r\n    return Evented;\r\n});\ndefine('skylark-langx/funcs',[\r\n    \"skylark-langx-funcs\"\r\n],function(funcs){\r\n    return funcs;\r\n});\ndefine('skylark-langx/hoster',[\r\n\t\"skylark-langx-hoster\"\r\n],function(hoster){\r\n\treturn hoster;\r\n});\ndefine('skylark-langx/numbers',[\r\n\t\"skylark-langx-numbers\"\r\n],function(numbers){\r\n\treturn numbers;\r\n});\ndefine('skylark-langx/objects',[\r\n    \"skylark-langx-objects\"\r\n],function(objects){\r\n    return objects;\r\n});\ndefine('skylark-langx/strings',[\r\n    \"skylark-langx-strings\"\r\n],function(strings){\r\n    return strings;\r\n});\ndefine('skylark-langx/Stateful',[\r\n\t\"./Evented\",\r\n  \"./strings\",\r\n  \"./objects\"\r\n],function(Evented,strings,objects){\r\n    var isEqual = objects.isEqual,\r\n        mixin = objects.mixin,\r\n        result = objects.result,\r\n        isEmptyObject = objects.isEmptyObject,\r\n        clone = objects.clone,\r\n        uniqueId = strings.uniqueId;\r\n\r\n    var Stateful = Evented.inherit({\r\n        _construct : function(attributes, options) {\r\n            var attrs = attributes || {};\r\n            options || (options = {});\r\n            this.cid = uniqueId(this.cidPrefix);\r\n            this.attributes = {};\r\n            if (options.collection) this.collection = options.collection;\r\n            if (options.parse) attrs = this.parse(attrs, options) || {};\r\n            var defaults = result(this, 'defaults');\r\n            attrs = mixin({}, defaults, attrs);\r\n            this.set(attrs, options);\r\n            this.changed = {};\r\n        },\r\n\r\n        // A hash of attributes whose current and previous value differ.\r\n        changed: null,\r\n\r\n        // The value returned during the last failed validation.\r\n        validationError: null,\r\n\r\n        // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\r\n        // CouchDB users may want to set this to `\"_id\"`.\r\n        idAttribute: 'id',\r\n\r\n        // The prefix is used to create the client id which is used to identify models locally.\r\n        // You may want to override this if you're experiencing name clashes with model ids.\r\n        cidPrefix: 'c',\r\n\r\n\r\n        // Return a copy of the model's `attributes` object.\r\n        toJSON: function(options) {\r\n          return clone(this.attributes);\r\n        },\r\n\r\n\r\n        // Get the value of an attribute.\r\n        get: function(attr) {\r\n          return this.attributes[attr];\r\n        },\r\n\r\n        // Returns `true` if the attribute contains a value that is not null\r\n        // or undefined.\r\n        has: function(attr) {\r\n          return this.get(attr) != null;\r\n        },\r\n\r\n        // Set a hash of model attributes on the object, firing `\"change\"`. This is\r\n        // the core primitive operation of a model, updating the data and notifying\r\n        // anyone who needs to know about the change in state. The heart of the beast.\r\n        set: function(key, val, options) {\r\n          if (key == null) return this;\r\n\r\n          // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n          var attrs;\r\n          if (typeof key === 'object') {\r\n            attrs = key;\r\n            options = val;\r\n          } else {\r\n            (attrs = {})[key] = val;\r\n          }\r\n\r\n          options || (options = {});\r\n\r\n          // Run validation.\r\n          if (!this._validate(attrs, options)) return false;\r\n\r\n          // Extract attributes and options.\r\n          var unset      = options.unset;\r\n          var silent     = options.silent;\r\n          var changes    = [];\r\n          var changing   = this._changing;\r\n          this._changing = true;\r\n\r\n          if (!changing) {\r\n            this._previousAttributes = clone(this.attributes);\r\n            this.changed = {};\r\n          }\r\n\r\n          var current = this.attributes;\r\n          var changed = this.changed;\r\n          var prev    = this._previousAttributes;\r\n\r\n          // For each `set` attribute, update or delete the current value.\r\n          for (var attr in attrs) {\r\n            val = attrs[attr];\r\n            if (!isEqual(current[attr], val)) changes.push(attr);\r\n            if (!isEqual(prev[attr], val)) {\r\n              changed[attr] = val;\r\n            } else {\r\n              delete changed[attr];\r\n            }\r\n            unset ? delete current[attr] : current[attr] = val;\r\n          }\r\n\r\n          // Update the `id`.\r\n          if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\r\n\r\n          // Trigger all relevant attribute changes.\r\n          if (!silent) {\r\n            if (changes.length) this._pending = options;\r\n            for (var i = 0; i < changes.length; i++) {\r\n              this.trigger('change:' + changes[i], this, current[changes[i]], options);\r\n            }\r\n          }\r\n\r\n          // You might be wondering why there's a `while` loop here. Changes can\r\n          // be recursively nested within `\"change\"` events.\r\n          if (changing) return this;\r\n          if (!silent) {\r\n            while (this._pending) {\r\n              options = this._pending;\r\n              this._pending = false;\r\n              this.trigger('change', this, options);\r\n            }\r\n          }\r\n          this._pending = false;\r\n          this._changing = false;\r\n          return this;\r\n        },\r\n\r\n        // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\r\n        // if the attribute doesn't exist.\r\n        unset: function(attr, options) {\r\n          return this.set(attr, void 0, mixin({}, options, {unset: true}));\r\n        },\r\n\r\n        // Clear all attributes on the model, firing `\"change\"`.\r\n        clear: function(options) {\r\n          var attrs = {};\r\n          for (var key in this.attributes) attrs[key] = void 0;\r\n          return this.set(attrs, mixin({}, options, {unset: true}));\r\n        },\r\n\r\n        // Determine if the model has changed since the last `\"change\"` event.\r\n        // If you specify an attribute name, determine if that attribute has changed.\r\n        hasChanged: function(attr) {\r\n          if (attr == null) return !isEmptyObject(this.changed);\r\n          return this.changed[attr] !== undefined;\r\n        },\r\n\r\n        // Return an object containing all the attributes that have changed, or\r\n        // false if there are no changed attributes. Useful for determining what\r\n        // parts of a view need to be updated and/or what attributes need to be\r\n        // persisted to the server. Unset attributes will be set to undefined.\r\n        // You can also pass an attributes object to diff against the model,\r\n        // determining if there *would be* a change.\r\n        changedAttributes: function(diff) {\r\n          if (!diff) return this.hasChanged() ? clone(this.changed) : false;\r\n          var old = this._changing ? this._previousAttributes : this.attributes;\r\n          var changed = {};\r\n          for (var attr in diff) {\r\n            var val = diff[attr];\r\n            if (isEqual(old[attr], val)) continue;\r\n            changed[attr] = val;\r\n          }\r\n          return !isEmptyObject(changed) ? changed : false;\r\n        },\r\n\r\n        // Get the previous value of an attribute, recorded at the time the last\r\n        // `\"change\"` event was fired.\r\n        previous: function(attr) {\r\n          if (attr == null || !this._previousAttributes) return null;\r\n          return this._previousAttributes[attr];\r\n        },\r\n\r\n        // Get all of the attributes of the model at the time of the previous\r\n        // `\"change\"` event.\r\n        previousAttributes: function() {\r\n          return clone(this._previousAttributes);\r\n        },\r\n\r\n        // Create a new model with identical attributes to this one.\r\n        clone: function() {\r\n          return new this.constructor(this.attributes);\r\n        },\r\n\r\n        // A model is new if it has never been saved to the server, and lacks an id.\r\n        isNew: function() {\r\n          return !this.has(this.idAttribute);\r\n        },\r\n\r\n        // Check if the model is currently in a valid state.\r\n        isValid: function(options) {\r\n          return this._validate({}, mixin({}, options, {validate: true}));\r\n        },\r\n\r\n        // Run validation against the next complete set of model attributes,\r\n        // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\r\n        _validate: function(attrs, options) {\r\n          if (!options.validate || !this.validate) return true;\r\n          attrs = mixin({}, this.attributes, attrs);\r\n          var error = this.validationError = this.validate(attrs, options) || null;\r\n          if (!error) return true;\r\n          this.trigger('invalid', this, error, mixin(options, {validationError: error}));\r\n          return false;\r\n        }\r\n    });\r\n\r\n\treturn Stateful;\r\n});\ndefine('skylark-langx/topic',[\r\n\t\"skylark-langx-topic\"\r\n],function(topic){\r\n\treturn topic;\r\n});\ndefine('skylark-langx/types',[\r\n    \"skylark-langx-types\"\r\n],function(types){\r\n    return types;\r\n});\ndefine('skylark-langx/langx',[\r\n    \"./skylark\",\r\n    \"./arrays\",\r\n    \"./ArrayStore\",\r\n    \"./aspect\",\r\n    \"./async\",\r\n    \"./datetimes\",\r\n    \"./Deferred\",\r\n    \"./Emitter\",\r\n    \"./Evented\",\r\n    \"./funcs\",\r\n    \"./hoster\",\r\n    \"./klass\",\r\n    \"./numbers\",\r\n    \"./objects\",\r\n    \"./Stateful\",\r\n    \"./strings\",\r\n    \"./topic\",\r\n    \"./types\"\r\n], function(skylark,arrays,ArrayStore,aspect,async,datetimes,Deferred,Emitter,Evented,funcs,hoster,klass,numbers,objects,Stateful,strings,topic,types) {\r\n    \"use strict\";\r\n    var toString = {}.toString,\r\n        concat = Array.prototype.concat,\r\n        indexOf = Array.prototype.indexOf,\r\n        slice = Array.prototype.slice,\r\n        filter = Array.prototype.filter,\r\n        mixin = objects.mixin,\r\n        safeMixin = objects.safeMixin,\r\n        isFunction = types.isFunction;\r\n\r\n\r\n    function funcArg(context, arg, idx, payload) {\r\n        return isFunction(arg) ? arg.call(context, idx, payload) : arg;\r\n    }\r\n\r\n    function getQueryParams(url) {\r\n        var url = url || window.location.href,\r\n            segs = url.split(\"?\"),\r\n            params = {};\r\n\r\n        if (segs.length > 1) {\r\n            segs[1].split(\"&\").forEach(function(queryParam) {\r\n                var nv = queryParam.split('=');\r\n                params[nv[0]] = nv[1];\r\n            });\r\n        }\r\n        return params;\r\n    }\r\n\r\n\r\n    function toPixel(value) {\r\n        // style values can be floats, client code may want\r\n        // to round for integer pixels.\r\n        return parseFloat(value) || 0;\r\n    }\r\n\r\n\r\n    var _uid = 1;\r\n\r\n    function uid(obj) {\r\n        return obj._uid || (obj._uid = _uid++);\r\n    }\r\n\r\n    function langx() {\r\n        return langx;\r\n    }\r\n\r\n    mixin(langx, {\r\n        createEvent : Emitter.createEvent,\r\n\r\n        funcArg: funcArg,\r\n\r\n        getQueryParams: getQueryParams,\r\n\r\n        toPixel: toPixel,\r\n\r\n        uid: uid,\r\n\r\n        URL: typeof window !== \"undefined\" ? window.URL || window.webkitURL : null\r\n\r\n    });\r\n\r\n\r\n    mixin(langx, arrays,aspect,datetimes,funcs,numbers,objects,strings,types,{\r\n        ArrayStore : ArrayStore,\r\n\r\n        async : async,\r\n        \r\n        Deferred: Deferred,\r\n\r\n        Emitter: Emitter,\r\n\r\n        Evented: Evented,\r\n\r\n        hoster : hoster,\r\n\r\n        klass : klass,\r\n       \r\n        Stateful: Stateful,\r\n\r\n        topic : topic\r\n    });\r\n\r\n    return skylark.langx = langx;\r\n});\ndefine('skylark-langx/main',[\r\n    \"./skylark\",\r\n    \"./langx\"\r\n], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx', ['skylark-langx/main'], function (main) { return main; });\n\n"]}