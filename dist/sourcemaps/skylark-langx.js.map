{"version":3,"sources":["skylark-langx.js"],"names":["define","ns","arrays","klass","QueryResults","results","isPromise","then","addIterativeMethod","method","args","arguments","result","Deferred","when","Array","prototype","apply","Object","delegate","total","length","ArrayStore","klassName","queryEngine","query","options","Error","queryObject","object","key","required","test","this","execute","array","arr","callback","thisObject","value","i","l","out","split","cache","buildFn","call","push","filter","sortSet","sort","a","b","aValue","attribute","bValue","valueOf","descending","start","count","slice","Infinity","matches","idProperty","get","id","data","index","getIdentity","put","Math","random","overwrite","add","remove","splice","setData","items","identifier","init","undefined","nextId","aspect","type","target","methodName","advice","receiveArguments","dispatcher","existing","executionId","before","next","around","after","newResults","signal","previous","advised","advise","async","datetimes","Evented","funcs","hoster","numbers","objects","escapeCharMap","freeze","&","<",">","\"","'","`","=","replaceChar","c","escapeChars","idCounter","template","name","string","line","body","func","map","escapeHTML","me","callee","variable","replace","Function","_","stash","context","ret","document","getElementById","innerHTML","camelCase","str","toUpperCase","dasherize","toLowerCase","deserializeValue","JSON","parse","e","String","toString","generateUUID","r","v","lowerFirst","charAt","rtrim","serializeValue","stringify","substitute","transform","getObject","match","retVal","getValue","keys","obj","_k","pop","reverse","window","proxy","format","slugify","from","RegExp","trim","uniqueId","prefix","upperFirst","xhr","strings","Xhr","mixin","Restful","inherit","idAttribute","getBaseUrl","baseEndpoint","baseUrl","server","basePath","_head","_get","_post","verb","url","post","_put","_delete","del","_patch","patch","params","retrieve","create","update","delete","isEqual","isEmptyObject","clone","Stateful","_construct","attributes","attrs","cid","cidPrefix","collection","defaults","set","changed","validationError","toJSON","attr","has","val","_validate","unset","silent","changes","changing","_changing","_previousAttributes","current","prev","_pending","trigger","clear","hasChanged","changedAttributes","diff","old","previousAttributes","constructor","isNew","isValid","validate","error","topic","types","skylark","concat","indexOf","safeMixin","isFunction","_uid","langx","createEvent","props","CustomEvent","funcArg","arg","idx","payload","getQueryParams","segs","location","href","forEach","queryParam","nv","toPixel","parseFloat","uid","URL","webkitURL","main"],"mappings":"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","file":"../skylark-langx.js","sourcesContent":["define('skylark-langx/skylark',[\r\n    \"skylark-langx-ns\"\r\n], function(ns) {\r\n\treturn ns;\r\n});\r\n\ndefine('skylark-langx/arrays',[\r\n\t\"skylark-langx-arrays\"\r\n],function(arrays){\r\n  return arrays;\r\n});\ndefine('skylark-langx/klass',[\r\n    \"skylark-langx-klass\"\r\n],function(klass){\r\n    return klass;\r\n});\ndefine('skylark-langx/ArrayStore',[\r\n    \"./klass\"\r\n],function(klass){\r\n    var SimpleQueryEngine = function(query, options){\r\n        // summary:\r\n        //      Simple query engine that matches using filter functions, named filter\r\n        //      functions or objects by name-value on a query object hash\r\n        //\r\n        // description:\r\n        //      The SimpleQueryEngine provides a way of getting a QueryResults through\r\n        //      the use of a simple object hash as a filter.  The hash will be used to\r\n        //      match properties on data objects with the corresponding value given. In\r\n        //      other words, only exact matches will be returned.\r\n        //\r\n        //      This function can be used as a template for more complex query engines;\r\n        //      for example, an engine can be created that accepts an object hash that\r\n        //      contains filtering functions, or a string that gets evaluated, etc.\r\n        //\r\n        //      When creating a new dojo.store, simply set the store's queryEngine\r\n        //      field as a reference to this function.\r\n        //\r\n        // query: Object\r\n        //      An object hash with fields that may match fields of items in the store.\r\n        //      Values in the hash will be compared by normal == operator, but regular expressions\r\n        //      or any object that provides a test() method are also supported and can be\r\n        //      used to match strings by more complex expressions\r\n        //      (and then the regex's or object's test() method will be used to match values).\r\n        //\r\n        // options: dojo/store/api/Store.QueryOptions?\r\n        //      An object that contains optional information such as sort, start, and count.\r\n        //\r\n        // returns: Function\r\n        //      A function that caches the passed query under the field \"matches\".  See any\r\n        //      of the \"query\" methods on dojo.stores.\r\n        //\r\n        // example:\r\n        //      Define a store with a reference to this engine, and set up a query method.\r\n        //\r\n        //  |   var myStore = function(options){\r\n        //  |       //  ...more properties here\r\n        //  |       this.queryEngine = SimpleQueryEngine;\r\n        //  |       //  define our query method\r\n        //  |       this.query = function(query, options){\r\n        //  |           return QueryResults(this.queryEngine(query, options)(this.data));\r\n        //  |       };\r\n        //  |   };\r\n\r\n        // create our matching query function\r\n        switch(typeof query){\r\n            default:\r\n                throw new Error(\"Can not query with a \" + typeof query);\r\n            case \"object\": case \"undefined\":\r\n                var queryObject = query;\r\n                query = function(object){\r\n                    for(var key in queryObject){\r\n                        var required = queryObject[key];\r\n                        if(required && required.test){\r\n                            // an object can provide a test method, which makes it work with regex\r\n                            if(!required.test(object[key], object)){\r\n                                return false;\r\n                            }\r\n                        }else if(required != object[key]){\r\n                            return false;\r\n                        }\r\n                    }\r\n                    return true;\r\n                };\r\n                break;\r\n            case \"string\":\r\n                // named query\r\n                if(!this[query]){\r\n                    throw new Error(\"No filter function \" + query + \" was found in store\");\r\n                }\r\n                query = this[query];\r\n                // fall through\r\n            case \"function\":\r\n                // fall through\r\n        }\r\n        \r\n        function filter(arr, callback, thisObject){\r\n            // summary:\r\n            //      Returns a new Array with those items from arr that match the\r\n            //      condition implemented by callback.\r\n            // arr: Array\r\n            //      the array to iterate over.\r\n            // callback: Function|String\r\n            //      a function that is invoked with three arguments (item,\r\n            //      index, array). The return of this function is expected to\r\n            //      be a boolean which determines whether the passed-in item\r\n            //      will be included in the returned array.\r\n            // thisObject: Object?\r\n            //      may be used to scope the call to callback\r\n            // returns: Array\r\n            // description:\r\n            //      This function corresponds to the JavaScript 1.6 Array.filter() method, with one difference: when\r\n            //      run over sparse arrays, this implementation passes the \"holes\" in the sparse array to\r\n            //      the callback function with a value of undefined. JavaScript 1.6's filter skips the holes in the sparse array.\r\n            //      For more details, see:\r\n            //      https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter\r\n            // example:\r\n            //  | // returns [2, 3, 4]\r\n            //  | array.filter([1, 2, 3, 4], function(item){ return item>1; });\r\n\r\n            // TODO: do we need \"Ctr\" here like in map()?\r\n            var i = 0, l = arr && arr.length || 0, out = [], value;\r\n            if(l && typeof arr == \"string\") arr = arr.split(\"\");\r\n            if(typeof callback == \"string\") callback = cache[callback] || buildFn(callback);\r\n            if(thisObject){\r\n                for(; i < l; ++i){\r\n                    value = arr[i];\r\n                    if(callback.call(thisObject, value, i, arr)){\r\n                        out.push(value);\r\n                    }\r\n                }\r\n            }else{\r\n                for(; i < l; ++i){\r\n                    value = arr[i];\r\n                    if(callback(value, i, arr)){\r\n                        out.push(value);\r\n                    }\r\n                }\r\n            }\r\n            return out; // Array\r\n        }\r\n\r\n        function execute(array){\r\n            // execute the whole query, first we filter\r\n            var results = filter(array, query);\r\n            // next we sort\r\n            var sortSet = options && options.sort;\r\n            if(sortSet){\r\n                results.sort(typeof sortSet == \"function\" ? sortSet : function(a, b){\r\n                    for(var sort, i=0; sort = sortSet[i]; i++){\r\n                        var aValue = a[sort.attribute];\r\n                        var bValue = b[sort.attribute];\r\n                        // valueOf enables proper comparison of dates\r\n                        aValue = aValue != null ? aValue.valueOf() : aValue;\r\n                        bValue = bValue != null ? bValue.valueOf() : bValue;\r\n                        if (aValue != bValue){\r\n                            // modified by lwf 2016/07/09\r\n                            //return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;\r\n                            return !!sort.descending == (aValue == null || aValue > bValue) ? -1 : 1;\r\n                        }\r\n                    }\r\n                    return 0;\r\n                });\r\n            }\r\n            // now we paginate\r\n            if(options && (options.start || options.count)){\r\n                var total = results.length;\r\n                results = results.slice(options.start || 0, (options.start || 0) + (options.count || Infinity));\r\n                results.total = total;\r\n            }\r\n            return results;\r\n        }\r\n        execute.matches = query;\r\n        return execute;\r\n    };\r\n\r\n    var QueryResults = function(results){\r\n        // summary:\r\n        //      A function that wraps the results of a store query with additional\r\n        //      methods.\r\n        // description:\r\n        //      QueryResults is a basic wrapper that allows for array-like iteration\r\n        //      over any kind of returned data from a query.  While the simplest store\r\n        //      will return a plain array of data, other stores may return deferreds or\r\n        //      promises; this wrapper makes sure that *all* results can be treated\r\n        //      the same.\r\n        //\r\n        //      Additional methods include `forEach`, `filter` and `map`.\r\n        // results: Array|dojo/promise/Promise\r\n        //      The result set as an array, or a promise for an array.\r\n        // returns:\r\n        //      An array-like object that can be used for iterating over.\r\n        // example:\r\n        //      Query a store and iterate over the results.\r\n        //\r\n        //  |   store.query({ prime: true }).forEach(function(item){\r\n        //  |       //  do something\r\n        //  |   });\r\n\r\n        if(!results){\r\n            return results;\r\n        }\r\n\r\n        var isPromise = !!results.then;\r\n        // if it is a promise it may be frozen\r\n        if(isPromise){\r\n            results = Object.delegate(results);\r\n        }\r\n        function addIterativeMethod(method){\r\n            // Always add the iterative methods so a QueryResults is\r\n            // returned whether the environment is ES3 or ES5\r\n            results[method] = function(){\r\n                var args = arguments;\r\n                var result = Deferred.when(results, function(results){\r\n                    //Array.prototype.unshift.call(args, results);\r\n                    return QueryResults(Array.prototype[method].apply(results, args));\r\n                });\r\n                // forEach should only return the result of when()\r\n                // when we're wrapping a promise\r\n                if(method !== \"forEach\" || isPromise){\r\n                    return result;\r\n                }\r\n            };\r\n        }\r\n\r\n        addIterativeMethod(\"forEach\");\r\n        addIterativeMethod(\"filter\");\r\n        addIterativeMethod(\"map\");\r\n        if(results.total == null){\r\n            results.total = Deferred.when(results, function(results){\r\n                return results.length;\r\n            });\r\n        }\r\n        return results; // Object\r\n    };\r\n\r\n    var ArrayStore = klass({\r\n        \"klassName\": \"ArrayStore\",\r\n\r\n        \"queryEngine\": SimpleQueryEngine,\r\n        \r\n        \"idProperty\": \"id\",\r\n\r\n\r\n        get: function(id){\r\n            // summary:\r\n            //      Retrieves an object by its identity\r\n            // id: Number\r\n            //      The identity to use to lookup the object\r\n            // returns: Object\r\n            //      The object in the store that matches the given id.\r\n            return this.data[this.index[id]];\r\n        },\r\n\r\n        getIdentity: function(object){\r\n            return object[this.idProperty];\r\n        },\r\n\r\n        put: function(object, options){\r\n            var data = this.data,\r\n                index = this.index,\r\n                idProperty = this.idProperty;\r\n            var id = object[idProperty] = (options && \"id\" in options) ? options.id : idProperty in object ? object[idProperty] : Math.random();\r\n            if(id in index){\r\n                // object exists\r\n                if(options && options.overwrite === false){\r\n                    throw new Error(\"Object already exists\");\r\n                }\r\n                // replace the entry in data\r\n                data[index[id]] = object;\r\n            }else{\r\n                // add the new object\r\n                index[id] = data.push(object) - 1;\r\n            }\r\n            return id;\r\n        },\r\n\r\n        add: function(object, options){\r\n            (options = options || {}).overwrite = false;\r\n            // call put with overwrite being false\r\n            return this.put(object, options);\r\n        },\r\n\r\n        remove: function(id){\r\n            // summary:\r\n            //      Deletes an object by its identity\r\n            // id: Number\r\n            //      The identity to use to delete the object\r\n            // returns: Boolean\r\n            //      Returns true if an object was removed, falsy (undefined) if no object matched the id\r\n            var index = this.index;\r\n            var data = this.data;\r\n            if(id in index){\r\n                data.splice(index[id], 1);\r\n                // now we have to reindex\r\n                this.setData(data);\r\n                return true;\r\n            }\r\n        },\r\n        query: function(query, options){\r\n            // summary:\r\n            //      Queries the store for objects.\r\n            // query: Object\r\n            //      The query to use for retrieving objects from the store.\r\n            // options: dojo/store/api/Store.QueryOptions?\r\n            //      The optional arguments to apply to the resultset.\r\n            // returns: dojo/store/api/Store.QueryResults\r\n            //      The results of the query, extended with iterative methods.\r\n            //\r\n            // example:\r\n            //      Given the following store:\r\n            //\r\n            //  |   var store = new Memory({\r\n            //  |       data: [\r\n            //  |           {id: 1, name: \"one\", prime: false },\r\n            //  |           {id: 2, name: \"two\", even: true, prime: true},\r\n            //  |           {id: 3, name: \"three\", prime: true},\r\n            //  |           {id: 4, name: \"four\", even: true, prime: false},\r\n            //  |           {id: 5, name: \"five\", prime: true}\r\n            //  |       ]\r\n            //  |   });\r\n            //\r\n            //  ...find all items where \"prime\" is true:\r\n            //\r\n            //  |   var results = store.query({ prime: true });\r\n            //\r\n            //  ...or find all items where \"even\" is true:\r\n            //\r\n            //  |   var results = store.query({ even: true });\r\n            return QueryResults(this.queryEngine(query, options)(this.data));\r\n        },\r\n\r\n        setData: function(data){\r\n            // summary:\r\n            //      Sets the given data as the source for this store, and indexes it\r\n            // data: Object[]\r\n            //      An array of objects to use as the source of data.\r\n            if(data.items){\r\n                // just for convenience with the data format IFRS expects\r\n                this.idProperty = data.identifier || this.idProperty;\r\n                data = this.data = data.items;\r\n            }else{\r\n                this.data = data;\r\n            }\r\n            this.index = {};\r\n            for(var i = 0, l = data.length; i < l; i++){\r\n                this.index[data[i][this.idProperty]] = i;\r\n            }\r\n        },\r\n\r\n        init: function(options) {\r\n            for(var i in options){\r\n                this[i] = options[i];\r\n            }\r\n            this.setData(this.data || []);\r\n        }\r\n\r\n    });\r\n\r\n\treturn ArrayStore;\r\n});\ndefine('skylark-langx/aspect',[\r\n],function(){\r\n\r\n  var undefined, nextId = 0;\r\n    function advise(dispatcher, type, advice, receiveArguments){\r\n        var previous = dispatcher[type];\r\n        var around = type == \"around\";\r\n        var signal;\r\n        if(around){\r\n            var advised = advice(function(){\r\n                return previous.advice(this, arguments);\r\n            });\r\n            signal = {\r\n                remove: function(){\r\n                    if(advised){\r\n                        advised = dispatcher = advice = null;\r\n                    }\r\n                },\r\n                advice: function(target, args){\r\n                    return advised ?\r\n                        advised.apply(target, args) :  // called the advised function\r\n                        previous.advice(target, args); // cancelled, skip to next one\r\n                }\r\n            };\r\n        }else{\r\n            // create the remove handler\r\n            signal = {\r\n                remove: function(){\r\n                    if(signal.advice){\r\n                        var previous = signal.previous;\r\n                        var next = signal.next;\r\n                        if(!next && !previous){\r\n                            delete dispatcher[type];\r\n                        }else{\r\n                            if(previous){\r\n                                previous.next = next;\r\n                            }else{\r\n                                dispatcher[type] = next;\r\n                            }\r\n                            if(next){\r\n                                next.previous = previous;\r\n                            }\r\n                        }\r\n\r\n                        // remove the advice to signal that this signal has been removed\r\n                        dispatcher = advice = signal.advice = null;\r\n                    }\r\n                },\r\n                id: nextId++,\r\n                advice: advice,\r\n                receiveArguments: receiveArguments\r\n            };\r\n        }\r\n        if(previous && !around){\r\n            if(type == \"after\"){\r\n                // add the listener to the end of the list\r\n                // note that we had to change this loop a little bit to workaround a bizarre IE10 JIT bug\r\n                while(previous.next && (previous = previous.next)){}\r\n                previous.next = signal;\r\n                signal.previous = previous;\r\n            }else if(type == \"before\"){\r\n                // add to beginning\r\n                dispatcher[type] = signal;\r\n                signal.next = previous;\r\n                previous.previous = signal;\r\n            }\r\n        }else{\r\n            // around or first one just replaces\r\n            dispatcher[type] = signal;\r\n        }\r\n        return signal;\r\n    }\r\n    function aspect(type){\r\n        return function(target, methodName, advice, receiveArguments){\r\n            var existing = target[methodName], dispatcher;\r\n            if(!existing || existing.target != target){\r\n                // no dispatcher in place\r\n                target[methodName] = dispatcher = function(){\r\n                    var executionId = nextId;\r\n                    // before advice\r\n                    var args = arguments;\r\n                    var before = dispatcher.before;\r\n                    while(before){\r\n                        args = before.advice.apply(this, args) || args;\r\n                        before = before.next;\r\n                    }\r\n                    // around advice\r\n                    if(dispatcher.around){\r\n                        var results = dispatcher.around.advice(this, args);\r\n                    }\r\n                    // after advice\r\n                    var after = dispatcher.after;\r\n                    while(after && after.id < executionId){\r\n                        if(after.receiveArguments){\r\n                            var newResults = after.advice.apply(this, args);\r\n                            // change the return value only if a new value was returned\r\n                            results = newResults === undefined ? results : newResults;\r\n                        }else{\r\n                            results = after.advice.call(this, results, args);\r\n                        }\r\n                        after = after.next;\r\n                    }\r\n                    return results;\r\n                };\r\n                if(existing){\r\n                    dispatcher.around = {advice: function(target, args){\r\n                        return existing.apply(target, args);\r\n                    }};\r\n                }\r\n                dispatcher.target = target;\r\n            }\r\n            var results = advise((dispatcher || existing), type, advice, receiveArguments);\r\n            advice = null;\r\n            return results;\r\n        };\r\n    }\r\n\r\n    return {\r\n        after: aspect(\"after\"),\r\n \r\n        around: aspect(\"around\"),\r\n        \r\n        before: aspect(\"before\")\r\n    };\r\n});\ndefine('skylark-langx/async',[\r\n    \"skylark-langx-async\"\r\n],function(async){\r\n    return async;\r\n});\ndefine('skylark-langx/datetimes',[\r\n    \"skylark-langx-datetimes\"\r\n],function(datetimes){\r\n    return datetimes;\r\n});\ndefine('skylark-langx/Deferred',[\r\n    \"skylark-langx-async/Deferred\"\r\n],function(Deferred){\r\n    return Deferred;\r\n});\ndefine('skylark-langx/Evented',[\r\n    \"skylark-langx-emitter\"\r\n],function(Evented){\r\n    return Evented;\r\n});\ndefine('skylark-langx/funcs',[\r\n    \"skylark-langx-funcs\"\r\n],function(funcs){\r\n    return funcs;\r\n});\ndefine('skylark-langx/hoster',[\r\n\t\"skylark-langx-hoster\"\r\n],function(hoster){\r\n\treturn hoster;\r\n});\ndefine('skylark-langx/numbers',[\r\n\t\"skylark-langx-numbers\"\r\n],function(numbers){\r\n\treturn numbers;\r\n});\ndefine('skylark-langx/objects',[\r\n    \"skylark-langx-objects\"\r\n],function(objects){\r\n    return objects;\r\n});\ndefine('skylark-langx/strings',[\r\n],function(){\r\n    // add default escape function for escaping HTML entities\r\n    var escapeCharMap = Object.freeze({\r\n        '&': '&amp;',\r\n        '<': '&lt;',\r\n        '>': '&gt;',\r\n        '\"': '&quot;',\r\n        \"'\": '&#x27;',\r\n        '`': '&#x60;',\r\n        '=': '&#x3D;',\r\n    });\r\n    function replaceChar(c) {\r\n        return escapeCharMap[c];\r\n    }\r\n    var escapeChars = /[&<>\"'`=]/g;\r\n\r\n\r\n     /*\r\n     * Converts camel case into dashes.\r\n     * @param {String} str\r\n     * @return {String}\r\n     * @exapmle marginTop -> margin-top\r\n     */\r\n    function dasherize(str) {\r\n        return str.replace(/::/g, '/')\r\n            .replace(/([A-Z]+)([A-Z][a-z])/g, '$1_$2')\r\n            .replace(/([a-z\\d])([A-Z])/g, '$1_$2')\r\n            .replace(/_/g, '-')\r\n            .toLowerCase();\r\n    }\r\n\r\n    function deserializeValue(value) {\r\n        try {\r\n            return value ?\r\n                value == \"true\" ||\r\n                (value == \"false\" ? false :\r\n                    value == \"null\" ? null :\r\n                    +value + \"\" == value ? +value :\r\n                    /^[\\[\\{]/.test(value) ? JSON.parse(value) :\r\n                    value) : value;\r\n        } catch (e) {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    function escapeHTML(str) {\r\n        if (str == null) {\r\n            return '';\r\n        }\r\n        if (!str) {\r\n            return String(str);\r\n        }\r\n\r\n        return str.toString().replace(escapeChars, replaceChar);\r\n    }\r\n\r\n    function generateUUID() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n            var r = Math.random() * 16 | 0;\r\n            var v = c === 'x' ? r : ((r & 0x3) | 0x8);\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    function trim(str) {\r\n        return str == null ? \"\" : String.prototype.trim.call(str);\r\n    }\r\n\r\n    function substitute( /*String*/ template,\r\n        /*Object|Array*/\r\n        map,\r\n        /*Function?*/\r\n        transform,\r\n        /*Object?*/\r\n        thisObject) {\r\n        // summary:\r\n        //    Performs parameterized substitutions on a string. Throws an\r\n        //    exception if any parameter is unmatched.\r\n        // template:\r\n        //    a string with expressions in the form `${key}` to be replaced or\r\n        //    `${key:format}` which specifies a format function. keys are case-sensitive.\r\n        // map:\r\n        //    hash to search for substitutions\r\n        // transform:\r\n        //    a function to process all parameters before substitution takes\r\n\r\n\r\n        thisObject = thisObject || window;\r\n        transform = transform ?\r\n            proxy(thisObject, transform) : function(v) {\r\n                return v;\r\n            };\r\n\r\n        function getObject(key, map) {\r\n            if (key.match(/\\./)) {\r\n                var retVal,\r\n                    getValue = function(keys, obj) {\r\n                        var _k = keys.pop();\r\n                        if (_k) {\r\n                            if (!obj[_k]) return null;\r\n                            return getValue(keys, retVal = obj[_k]);\r\n                        } else {\r\n                            return retVal;\r\n                        }\r\n                    };\r\n                return getValue(key.split(\".\").reverse(), map);\r\n            } else {\r\n                return map[key];\r\n            }\r\n        }\r\n\r\n        return template.replace(/\\$\\{([^\\s\\:\\}]+)(?:\\:([^\\s\\:\\}]+))?\\}/g,\r\n            function(match, key, format) {\r\n                var value = getObject(key, map);\r\n                if (format) {\r\n                    value = getObject(format, thisObject).call(thisObject, value, key);\r\n                }\r\n                return transform(value, key).toString();\r\n            }); // String\r\n    }\r\n\r\n    var idCounter = 0;\r\n    function uniqueId (prefix) {\r\n        var id = ++idCounter + '';\r\n        return prefix ? prefix + id : id;\r\n    }\r\n\r\n\r\n    /**\r\n     * https://github.com/cho45/micro-template.js\r\n     * (c) cho45 http://cho45.github.com/mit-license\r\n     */\r\n    function template (id, data) {\r\n\r\n        function include(name, args) {\r\n            var stash = {};\r\n            for (var key in template.context.stash) if (template.context.stash.hasOwnProperty(key)) {\r\n                stash[key] = template.context.stash[key];\r\n            }\r\n            if (args) for (var key in args) if (args.hasOwnProperty(key)) {\r\n                stash[key] = args[key];\r\n            }\r\n            var context = template.context;\r\n            context.ret += template(name, stash);\r\n            template.context = context;\r\n        }\r\n\r\n        function wrapper(name, fun) {\r\n            var current = template.context.ret;\r\n            template.context.ret = '';\r\n            fun.apply(template.context);\r\n            var content = template.context.ret;\r\n            var orig_content = template.context.stash.content;\r\n            template.context.stash.content = content;\r\n            template.context.ret = current + template(name, template.context.stash);\r\n            template.context.stash.content = orig_content;\r\n        }\r\n\r\n        var me = arguments.callee;\r\n        if (!me.cache[id]) me.cache[id] = (function () {\r\n            var name = id, string = /^[\\w\\-]+$/.test(id) ? me.get(id): (name = 'template(string)', id); // no warnings\r\n            var line = 1, body = (\r\n                \"try { \" +\r\n                    (me.variable ?  \"var \" + me.variable + \" = this.stash;\" : \"with (this.stash) { \") +\r\n                        \"this.ret += '\"  +\r\n                        string.\r\n                            replace(/<%/g, '\\x11').replace(/%>/g, '\\x13'). // if you want other tag, just edit this line\r\n                            replace(/'(?![^\\x11\\x13]+?\\x13)/g, '\\\\x27').\r\n                            replace(/^\\s*|\\s*$/g, '').\r\n                            replace(/\\n|\\r\\n/g, function () { return \"';\\nthis.line = \" + (++line) + \"; this.ret += '\\\\n\" }).\r\n                            replace(/\\x11=raw(.+?)\\x13/g, \"' + ($1) + '\").\r\n                            replace(/\\x11=(.+?)\\x13/g, \"' + this.escapeHTML($1) + '\").\r\n                            replace(/\\x11(.+?)\\x13/g, \"'; $1; this.ret += '\") +\r\n                    \"'; \" + (me.variable ? \"\" : \"}\") + \"return this.ret;\" +\r\n                \"} catch (e) { throw 'TemplateError: ' + e + ' (on \" + name + \"' + ' line ' + this.line + ')'; } \" +\r\n                \"//@ sourceURL=\" + name + \"\\n\" // source map\r\n            ).replace(/this\\.ret \\+= '';/g, '');\r\n            var func = new Function(body);\r\n            var map  = { '&' : '&amp;', '<' : '&lt;', '>' : '&gt;', '\\x22' : '&#x22;', '\\x27' : '&#x27;' };\r\n            var escapeHTML = function (string) { return (''+string).replace(/[&<>\\'\\\"]/g, function (_) { return map[_] }) };\r\n            return function (stash) { return func.call(me.context = { escapeHTML: escapeHTML, line: 1, ret : '', stash: stash }) };\r\n        })();\r\n        return data ? me.cache[id](data) : me.cache[id];\r\n    }\r\n\r\n    template.cache = {};\r\n    \r\n\r\n    template.get = function (id) {\r\n        return document.getElementById(id).innerHTML;\r\n    };\r\n\r\n    function rtrim(str) {\r\n        return str.replace(/\\s+$/g, '');\r\n    }\r\n\r\n    // Slugify a string\r\n    function slugify(str) {\r\n        str = str.replace(/^\\s+|\\s+$/g, '');\r\n\r\n        // Make the string lowercase\r\n        str = str.toLowerCase();\r\n\r\n        // Remove accents, swap ñ for n, etc\r\n        var from = \"ÁÄÂÀÃÅČÇĆĎÉĚËÈÊẼĔȆÍÌÎÏŇÑÓÖÒÔÕØŘŔŠŤÚŮÜÙÛÝŸŽáäâàãåčçćďéěëèêẽĕȇíìîïňñóöòôõøðřŕšťúůüùûýÿžþÞĐđßÆa·/_,:;\";\r\n        var to   = \"AAAAAACCCDEEEEEEEEIIIINNOOOOOORRSTUUUUUYYZaaaaaacccdeeeeeeeeiiiinnooooooorrstuuuuuyyzbBDdBAa------\";\r\n        for (var i=0, l=from.length ; i<l ; i++) {\r\n            str = str.replace(new RegExp(from.charAt(i), 'g'), to.charAt(i));\r\n        }\r\n\r\n        // Remove invalid chars\r\n        str = str.replace(/[^a-z0-9 -]/g, '') \r\n        // Collapse whitespace and replace by -\r\n        .replace(/\\s+/g, '-') \r\n        // Collapse dashes\r\n        .replace(/-+/g, '-'); \r\n\r\n        return str;\r\n    }    \r\n\r\n    // return boolean if string 'true' or string 'false', or if a parsable string which is a number\r\n    // also supports JSON object and/or arrays parsing\r\n    function toType(str) {\r\n        var type = typeof str;\r\n        if (type !== 'string') {\r\n            return str;\r\n        }\r\n        var nb = parseFloat(str);\r\n        if (!isNaN(nb) && isFinite(str)) {\r\n            return nb;\r\n        }\r\n        if (str === 'false') {\r\n            return false;\r\n        }\r\n        if (str === 'true') {\r\n            return true;\r\n        }\r\n\r\n        try {\r\n            str = JSON.parse(str);\r\n        } catch (e) {}\r\n\r\n        return str;\r\n    }\r\n\r\n\treturn {\r\n        camelCase: function(str) {\r\n            return str.replace(/-([\\da-z])/g, function(a) {\r\n                return a.toUpperCase().replace('-', '');\r\n            });\r\n        },\r\n\r\n        dasherize: dasherize,\r\n\r\n        deserializeValue: deserializeValue,\r\n\r\n        escapeHTML : escapeHTML,\r\n\r\n        generateUUID : generateUUID,\r\n\r\n        lowerFirst: function(str) {\r\n            return str.charAt(0).toLowerCase() + str.slice(1);\r\n        },\r\n\r\n        rtrim : rtrim,\r\n\r\n        serializeValue: function(value) {\r\n            return JSON.stringify(value)\r\n        },\r\n\r\n\r\n        substitute: substitute,\r\n\r\n        slugify : slugify,\r\n\r\n        template : template,\r\n\r\n        trim: trim,\r\n\r\n        uniqueId: uniqueId,\r\n\r\n        upperFirst: function(str) {\r\n            return str.charAt(0).toUpperCase() + str.slice(1);\r\n        }\r\n\t} ; \r\n\r\n});\ndefine('skylark-langx/Xhr',[\r\n    \"skylark-langx-xhr\"\r\n],function(xhr){\r\n    return xhr;\r\n});\ndefine('skylark-langx/Restful',[\r\n    \"./Evented\",\r\n    \"./objects\",\r\n    \"./strings\",\r\n    \"./Xhr\"\r\n],function(Evented,objects,strings,Xhr){\r\n    var mixin = objects.mixin,\r\n        substitute = strings.substitute;\r\n\r\n    var Restful = Evented.inherit({\r\n        \"klassName\" : \"Restful\",\r\n\r\n        \"idAttribute\": \"id\",\r\n        \r\n        getBaseUrl : function(args) {\r\n            //$$baseEndpoint : \"/files/${fileId}/comments\",\r\n            var baseEndpoint = substitute(this.baseEndpoint,args),\r\n                baseUrl = this.server + this.basePath + baseEndpoint;\r\n            if (args[this.idAttribute]!==undefined) {\r\n                baseUrl = baseUrl + \"/\" + args[this.idAttribute]; \r\n            }\r\n            return baseUrl;\r\n        },\r\n        _head : function(args) {\r\n            //get resource metadata .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n        },\r\n        _get : function(args) {\r\n            //get resource ,one or list .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, null if list\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            return Xhr.get(this.getBaseUrl(args),args);\r\n        },\r\n        _post  : function(args,verb) {\r\n            //create or move resource .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            //verb : the verb ,ex: copy,touch,trash,untrash,watch\r\n            var url = this.getBaseUrl(args);\r\n            if (verb) {\r\n                url = url + \"/\" + verb;\r\n            }\r\n            return Xhr.post(url, args);\r\n        },\r\n\r\n        _put  : function(args,verb) {\r\n            //update resource .\r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            //verb : the verb ,ex: copy,touch,trash,untrash,watch\r\n            var url = this.getBaseUrl(args);\r\n            if (verb) {\r\n                url = url + \"/\" + verb;\r\n            }\r\n            return Xhr.put(url, args);\r\n        },\r\n\r\n        _delete : function(args) {\r\n            //delete resource . \r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}         \r\n\r\n            // HTTP request : DELETE http://center.utilhub.com/registry/v1/apps/{appid}\r\n            var url = this.getBaseUrl(args);\r\n            return Xhr.del(url);\r\n        },\r\n\r\n        _patch : function(args){\r\n            //update resource metadata. \r\n            //args : id and other info for the resource ,ex\r\n            //{\r\n            //  \"id\" : 234,  // the own id, required\r\n            //  \"data\" : body // the own data,required\r\n            //  \"fileId\"   : 2 // the parent resource id, option by resource\r\n            //}\r\n            var url = this.getBaseUrl(args);\r\n            return Xhr.patch(url, args);\r\n        },\r\n        query: function(params) {\r\n            \r\n            return this._post(params);\r\n        },\r\n\r\n        retrieve: function(params) {\r\n            return this._get(params);\r\n        },\r\n\r\n        create: function(params) {\r\n            return this._post(params);\r\n        },\r\n\r\n        update: function(params) {\r\n            return this._put(params);\r\n        },\r\n\r\n        delete: function(params) {\r\n            // HTTP request : DELETE http://center.utilhub.com/registry/v1/apps/{appid}\r\n            return this._delete(params);\r\n        },\r\n\r\n        patch: function(params) {\r\n           // HTTP request : PATCH http://center.utilhub.com/registry/v1/apps/{appid}\r\n            return this._patch(params);\r\n        },\r\n        init: function(params) {\r\n            mixin(this,params);\r\n //           this._xhr = XHRx();\r\n       }\r\n    });\r\n\r\n    return Restful;\r\n});\ndefine('skylark-langx/Stateful',[\r\n\t\"./Evented\",\r\n  \"./strings\",\r\n  \"./objects\"\r\n],function(Evented,strings,objects){\r\n    var isEqual = objects.isEqual,\r\n        mixin = objects.mixin,\r\n        result = objects.result,\r\n        isEmptyObject = objects.isEmptyObject,\r\n        clone = objects.clone,\r\n        uniqueId = strings.uniqueId;\r\n\r\n    var Stateful = Evented.inherit({\r\n        _construct : function(attributes, options) {\r\n            var attrs = attributes || {};\r\n            options || (options = {});\r\n            this.cid = uniqueId(this.cidPrefix);\r\n            this.attributes = {};\r\n            if (options.collection) this.collection = options.collection;\r\n            if (options.parse) attrs = this.parse(attrs, options) || {};\r\n            var defaults = result(this, 'defaults');\r\n            attrs = mixin({}, defaults, attrs);\r\n            this.set(attrs, options);\r\n            this.changed = {};\r\n        },\r\n\r\n        // A hash of attributes whose current and previous value differ.\r\n        changed: null,\r\n\r\n        // The value returned during the last failed validation.\r\n        validationError: null,\r\n\r\n        // The default name for the JSON `id` attribute is `\"id\"`. MongoDB and\r\n        // CouchDB users may want to set this to `\"_id\"`.\r\n        idAttribute: 'id',\r\n\r\n        // The prefix is used to create the client id which is used to identify models locally.\r\n        // You may want to override this if you're experiencing name clashes with model ids.\r\n        cidPrefix: 'c',\r\n\r\n\r\n        // Return a copy of the model's `attributes` object.\r\n        toJSON: function(options) {\r\n          return clone(this.attributes);\r\n        },\r\n\r\n\r\n        // Get the value of an attribute.\r\n        get: function(attr) {\r\n          return this.attributes[attr];\r\n        },\r\n\r\n        // Returns `true` if the attribute contains a value that is not null\r\n        // or undefined.\r\n        has: function(attr) {\r\n          return this.get(attr) != null;\r\n        },\r\n\r\n        // Set a hash of model attributes on the object, firing `\"change\"`. This is\r\n        // the core primitive operation of a model, updating the data and notifying\r\n        // anyone who needs to know about the change in state. The heart of the beast.\r\n        set: function(key, val, options) {\r\n          if (key == null) return this;\r\n\r\n          // Handle both `\"key\", value` and `{key: value}` -style arguments.\r\n          var attrs;\r\n          if (typeof key === 'object') {\r\n            attrs = key;\r\n            options = val;\r\n          } else {\r\n            (attrs = {})[key] = val;\r\n          }\r\n\r\n          options || (options = {});\r\n\r\n          // Run validation.\r\n          if (!this._validate(attrs, options)) return false;\r\n\r\n          // Extract attributes and options.\r\n          var unset      = options.unset;\r\n          var silent     = options.silent;\r\n          var changes    = [];\r\n          var changing   = this._changing;\r\n          this._changing = true;\r\n\r\n          if (!changing) {\r\n            this._previousAttributes = clone(this.attributes);\r\n            this.changed = {};\r\n          }\r\n\r\n          var current = this.attributes;\r\n          var changed = this.changed;\r\n          var prev    = this._previousAttributes;\r\n\r\n          // For each `set` attribute, update or delete the current value.\r\n          for (var attr in attrs) {\r\n            val = attrs[attr];\r\n            if (!isEqual(current[attr], val)) changes.push(attr);\r\n            if (!isEqual(prev[attr], val)) {\r\n              changed[attr] = val;\r\n            } else {\r\n              delete changed[attr];\r\n            }\r\n            unset ? delete current[attr] : current[attr] = val;\r\n          }\r\n\r\n          // Update the `id`.\r\n          if (this.idAttribute in attrs) this.id = this.get(this.idAttribute);\r\n\r\n          // Trigger all relevant attribute changes.\r\n          if (!silent) {\r\n            if (changes.length) this._pending = options;\r\n            for (var i = 0; i < changes.length; i++) {\r\n              this.trigger('change:' + changes[i], this, current[changes[i]], options);\r\n            }\r\n          }\r\n\r\n          // You might be wondering why there's a `while` loop here. Changes can\r\n          // be recursively nested within `\"change\"` events.\r\n          if (changing) return this;\r\n          if (!silent) {\r\n            while (this._pending) {\r\n              options = this._pending;\r\n              this._pending = false;\r\n              this.trigger('change', this, options);\r\n            }\r\n          }\r\n          this._pending = false;\r\n          this._changing = false;\r\n          return this;\r\n        },\r\n\r\n        // Remove an attribute from the model, firing `\"change\"`. `unset` is a noop\r\n        // if the attribute doesn't exist.\r\n        unset: function(attr, options) {\r\n          return this.set(attr, void 0, mixin({}, options, {unset: true}));\r\n        },\r\n\r\n        // Clear all attributes on the model, firing `\"change\"`.\r\n        clear: function(options) {\r\n          var attrs = {};\r\n          for (var key in this.attributes) attrs[key] = void 0;\r\n          return this.set(attrs, mixin({}, options, {unset: true}));\r\n        },\r\n\r\n        // Determine if the model has changed since the last `\"change\"` event.\r\n        // If you specify an attribute name, determine if that attribute has changed.\r\n        hasChanged: function(attr) {\r\n          if (attr == null) return !isEmptyObject(this.changed);\r\n          return this.changed[attr] !== undefined;\r\n        },\r\n\r\n        // Return an object containing all the attributes that have changed, or\r\n        // false if there are no changed attributes. Useful for determining what\r\n        // parts of a view need to be updated and/or what attributes need to be\r\n        // persisted to the server. Unset attributes will be set to undefined.\r\n        // You can also pass an attributes object to diff against the model,\r\n        // determining if there *would be* a change.\r\n        changedAttributes: function(diff) {\r\n          if (!diff) return this.hasChanged() ? clone(this.changed) : false;\r\n          var old = this._changing ? this._previousAttributes : this.attributes;\r\n          var changed = {};\r\n          for (var attr in diff) {\r\n            var val = diff[attr];\r\n            if (isEqual(old[attr], val)) continue;\r\n            changed[attr] = val;\r\n          }\r\n          return !isEmptyObject(changed) ? changed : false;\r\n        },\r\n\r\n        // Get the previous value of an attribute, recorded at the time the last\r\n        // `\"change\"` event was fired.\r\n        previous: function(attr) {\r\n          if (attr == null || !this._previousAttributes) return null;\r\n          return this._previousAttributes[attr];\r\n        },\r\n\r\n        // Get all of the attributes of the model at the time of the previous\r\n        // `\"change\"` event.\r\n        previousAttributes: function() {\r\n          return clone(this._previousAttributes);\r\n        },\r\n\r\n        // Create a new model with identical attributes to this one.\r\n        clone: function() {\r\n          return new this.constructor(this.attributes);\r\n        },\r\n\r\n        // A model is new if it has never been saved to the server, and lacks an id.\r\n        isNew: function() {\r\n          return !this.has(this.idAttribute);\r\n        },\r\n\r\n        // Check if the model is currently in a valid state.\r\n        isValid: function(options) {\r\n          return this._validate({}, mixin({}, options, {validate: true}));\r\n        },\r\n\r\n        // Run validation against the next complete set of model attributes,\r\n        // returning `true` if all is well. Otherwise, fire an `\"invalid\"` event.\r\n        _validate: function(attrs, options) {\r\n          if (!options.validate || !this.validate) return true;\r\n          attrs = mixin({}, this.attributes, attrs);\r\n          var error = this.validationError = this.validate(attrs, options) || null;\r\n          if (!error) return true;\r\n          this.trigger('invalid', this, error, mixin(options, {validationError: error}));\r\n          return false;\r\n        }\r\n    });\r\n\r\n\treturn Stateful;\r\n});\ndefine('skylark-langx/topic',[\r\n\t\"skylark-langx-topic\"\r\n],function(topic){\r\n\treturn topic;\r\n});\ndefine('skylark-langx/types',[\r\n    \"skylark-langx-types\"\r\n],function(types){\r\n    return types;\r\n});\ndefine('skylark-langx/langx',[\r\n    \"./skylark\",\r\n    \"./arrays\",\r\n    \"./ArrayStore\",\r\n    \"./aspect\",\r\n    \"./async\",\r\n    \"./datetimes\",\r\n    \"./Deferred\",\r\n    \"./Evented\",\r\n    \"./funcs\",\r\n    \"./hoster\",\r\n    \"./klass\",\r\n    \"./numbers\",\r\n    \"./objects\",\r\n    \"./Restful\",\r\n    \"./Stateful\",\r\n    \"./strings\",\r\n    \"./topic\",\r\n    \"./types\",\r\n    \"./Xhr\"\r\n], function(skylark,arrays,ArrayStore,aspect,async,datetimes,Deferred,Evented,funcs,hoster,klass,numbers,objects,Restful,Stateful,strings,topic,types,Xhr) {\r\n    \"use strict\";\r\n    var toString = {}.toString,\r\n        concat = Array.prototype.concat,\r\n        indexOf = Array.prototype.indexOf,\r\n        slice = Array.prototype.slice,\r\n        filter = Array.prototype.filter,\r\n        mixin = objects.mixin,\r\n        safeMixin = objects.safeMixin,\r\n        isFunction = types.isFunction;\r\n\r\n\r\n    function createEvent(type, props) {\r\n        var e = new CustomEvent(type, props);\r\n\r\n        return safeMixin(e, props);\r\n    }\r\n    \r\n\r\n    function funcArg(context, arg, idx, payload) {\r\n        return isFunction(arg) ? arg.call(context, idx, payload) : arg;\r\n    }\r\n\r\n    function getQueryParams(url) {\r\n        var url = url || window.location.href,\r\n            segs = url.split(\"?\"),\r\n            params = {};\r\n\r\n        if (segs.length > 1) {\r\n            segs[1].split(\"&\").forEach(function(queryParam) {\r\n                var nv = queryParam.split('=');\r\n                params[nv[0]] = nv[1];\r\n            });\r\n        }\r\n        return params;\r\n    }\r\n\r\n\r\n    function toPixel(value) {\r\n        // style values can be floats, client code may want\r\n        // to round for integer pixels.\r\n        return parseFloat(value) || 0;\r\n    }\r\n\r\n\r\n    var _uid = 1;\r\n\r\n    function uid(obj) {\r\n        return obj._uid || (obj._uid = _uid++);\r\n    }\r\n\r\n    function langx() {\r\n        return langx;\r\n    }\r\n\r\n    mixin(langx, {\r\n        createEvent : createEvent,\r\n\r\n        funcArg: funcArg,\r\n\r\n        getQueryParams: getQueryParams,\r\n\r\n        toPixel: toPixel,\r\n\r\n        uid: uid,\r\n\r\n        URL: typeof window !== \"undefined\" ? window.URL || window.webkitURL : null\r\n\r\n    });\r\n\r\n\r\n    mixin(langx, arrays,aspect,datetimes,funcs,numbers,objects,strings,types,{\r\n        ArrayStore : ArrayStore,\r\n\r\n        async : async,\r\n        \r\n        Deferred: Deferred,\r\n\r\n        Evented: Evented,\r\n\r\n        hoster : hoster,\r\n\r\n        klass : klass,\r\n\r\n        Restful: Restful,\r\n        \r\n        Stateful: Stateful,\r\n\r\n        topic : topic,\r\n\r\n        Xhr: Xhr\r\n\r\n    });\r\n\r\n    return skylark.langx = langx;\r\n});\ndefine('skylark-langx/main',[\r\n    \"./skylark\",\r\n    \"./langx\"\r\n], function(skylark) {\r\n    return skylark;\r\n});\r\n\ndefine('skylark-langx', ['skylark-langx/main'], function (main) { return main; });\n\n"]}